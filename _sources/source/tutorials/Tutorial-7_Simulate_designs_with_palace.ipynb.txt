{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Tutorial 7: Simulating Qiskit Metal `design` objects with `palace` using `SQDMetal`\n",
    "\n",
    "In this tutorial, we will cover how to do electrostatic and eigenmode simulations of a qubit-cavity system using `palace`.\n",
    "\n",
    "**Requirements:**\n",
    "\n",
    "- [ ] Ensure that [SQDMetal](https://github.com/sqdlab/SQDMetal) is installed in your environment.\n",
    "- [ ] Ensure that [palace](https://github.com/awslabs/palace) is installed in your environment. Instructions [here](https://lfl-lab.github.io/SQuADDS/source/resources/palace.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ[\"KMP_DUPLICATE_LIB_OK\"]=\"TRUE\"\n",
    "os.environ[\"PMIX_MCA_gds\"]=\"hash\"\n",
    "\n",
    "import gmsh\n",
    "gmsh.initialize()\n",
    "\n",
    "os.makedirs('sims', exist_ok=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define the path to the `palace` executable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "path_to_palace = '/Users/shanto/LFL/palace/build/bin/palace'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Electrostatic Simulation\n",
    "\n",
    "We will be learning how to extract the capacitance matrix from an electrostatic simulation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For a qubit-claw system\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Importing the relevant modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import qiskit_metal as metal\n",
    "from qiskit_metal import designs, draw\n",
    "from qiskit_metal import MetalGUI, Dict, open_docs\n",
    "from qiskit_metal.toolbox_metal import math_and_overrides\n",
    "from qiskit_metal.qlibrary.core import QComponent\n",
    "from collections import OrderedDict\n",
    "from qiskit_metal.qlibrary.tlines.meandered import RouteMeander\n",
    "from qiskit_metal.qlibrary.tlines.straight_path import RouteStraight\n",
    "from qiskit_metal.qlibrary.tlines.pathfinder import RoutePathfinder\n",
    "from qiskit_metal.qlibrary.terminations.launchpad_wb import LaunchpadWirebond\n",
    "from qiskit_metal.qlibrary.terminations.open_to_ground import OpenToGround\n",
    "from qiskit_metal.qlibrary.terminations.short_to_ground import ShortToGround\n",
    "from qiskit_metal.qlibrary.couplers.coupled_line_tee import CoupledLineTee\n",
    "from qiskit_metal.qlibrary.qubits.transmon_cross import TransmonCross\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We want to get the cap matrix for a system with TransmonCross, claw and ground (similar to the simulations we ran to build `SQuADDS_DB`)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FutureWarning: Module 'pyaedt' has become an alias to the new package structure. Please update you imports to use the new architecture based on 'ansys.aedt.core'. In addition, some files have been renamed to follow the PEP 8 naming convention. The old structure and file names will be deprecated in future versions, see https://aedt.docs.pyansys.com/version/stable/release_1_0.html\n"
     ]
    }
   ],
   "source": [
    "from squadds import SQuADDS_DB, Analyzer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f89b38167fb342f284eae495f80f9d43",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading readme:   0%|          | 0.00/2.75k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3969cfdeda3c46f2a8a3cf62039c2090",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating train split: 0 examples [00:00, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# First, get a design from SQuADDS  \n",
    "db = SQuADDS_DB()  \n",
    "db.select_system(\"qubit\")  \n",
    "db.select_qubit(\"TransmonCross\")  \n",
    "df = db.create_system_df()\n",
    "analyzer = Analyzer(db)  \n",
    "  \n",
    "# Define target parameters for your qubit  \n",
    "target_params = {  \n",
    "    \"qubit_frequency_GHz\": 4.2,  # Example value  \n",
    "    \"anharmonicity_MHz\": -200    # Example value  \n",
    "}  \n",
    "  \n",
    "# Find the closest design  \n",
    "results = analyzer.find_closest(target_params, num_top=1)  \n",
    "best_device = results.iloc[0]  \n",
    "  \n",
    "# Get the design options  \n",
    "qubit_options = best_device[\"design_options\"]  \n",
    "  \n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "10:32AM 21s CRITICAL [_qt_message_handler]: line: 0, func: None(), file: None  WARNING: Populating font family aliases took 259 ms. Replace uses of missing font family \"Courier\" with one that exists to avoid this cost. \n",
      "\n",
      "10:32AM 21s CRITICAL [_qt_message_handler]: line: 0, func: None(), file: None  CRITICAL: <QNSWindow: 0x7fd1906b72b0; contentView=<QNSView: 0x7fd1906b6b10; QCocoaWindow(0x7fd1906b6a00, window=QWidgetWindow(0x7fd1906b64a0, name=\"MainWindowPlotWindow\"))>> has active key-value observers (KVO)! These will stop working now that the window is recreated, and will result in exceptions when the observers are removed. Break in QCocoaWindow::recreateWindowIfNeeded to debug.\n",
      "\n",
      "10:32AM 21s CRITICAL [_qt_message_handler]: line: 0, func: None(), file: None  CRITICAL: <QNSWindow: 0x7fd1907fba10; contentView=<QNSView: 0x7fd1907fb270; QCocoaWindow(0x7fd1907fb160, window=QWidgetWindow(0x7fd1907fabe0, name=\"ElementsWindowWindow\"))>> has active key-value observers (KVO)! These will stop working now that the window is recreated, and will result in exceptions when the observers are removed. Break in QCocoaWindow::recreateWindowIfNeeded to debug.\n",
      "\n",
      "10:32AM 21s CRITICAL [_qt_message_handler]: line: 0, func: None(), file: None  CRITICAL: <QNSWindow: 0x7fd1906adad0; contentView=<QNSView: 0x7fd1906ad0f0; QCocoaWindow(0x7fd1906acfe0, window=QWidgetWindow(0x7fd1906acac0, name=\"MainWindowWindow\"))>> has active key-value observers (KVO)! These will stop working now that the window is recreated, and will result in exceptions when the observers are removed. Break in QCocoaWindow::recreateWindowIfNeeded to debug.\n",
      "\n",
      "10:32AM 21s CRITICAL [_qt_message_handler]: line: 0, func: None(), file: None  CRITICAL: <QNSWindow: 0x7fd1906db820; contentView=<QNSView: 0x7fd1906db080; QCocoaWindow(0x7fd1906daf70, window=QWidgetWindow(0x7fd1906daa10, name=\"NetListWindowWindow\"))>> has active key-value observers (KVO)! These will stop working now that the window is recreated, and will result in exceptions when the observers are removed. Break in QCocoaWindow::recreateWindowIfNeeded to debug.\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {
      "image/png": {
       "width": 500
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set up chip design as planar\n",
    "design = designs.DesignPlanar({}, overwrite_enabled=True)\n",
    "\n",
    "\n",
    "# Create GUI\n",
    "gui = MetalGUI(design)\n",
    "\n",
    "# Qubit and a claw\n",
    "# Create the TransmonCross object with the modified options  \n",
    "# Update only the position parameters  \n",
    "qubit_options[\"pos_x\"] = '0.6075mm'  \n",
    "qubit_options[\"pos_y\"] = '-1.464'  \n",
    "Q1 = TransmonCross(design, 'Q1', options=qubit_options)\n",
    "\n",
    "gui.rebuild()\n",
    "design.rebuild()\n",
    "gui.autoscale()\n",
    "gui.screenshot('sims/qubit.png')\n",
    "                                                "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Call the `SQDMetal` objects. Change the hyper-parameters as needed for a more accurate simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from SQDMetal.PALACE.Capacitance_Simulation import PALACE_Capacitance_Simulation\n",
    "\n",
    "user_defined_options = {\n",
    "                \"mesh_refinement\": 0,                             #refines mesh in PALACE - essetially divides every mesh element in half\n",
    "                \"dielectric_material\": \"silicon\",                  #choose dielectric material - 'silicon' or 'sapphire'\n",
    "                \"solver_order\": 1,                                 #increasing solver order increases accuracy of simulation, but significantly increases sim time\n",
    "                \"solver_tol\": 1.0e-8,                              #error residual tolerance for iterative solver\n",
    "                \"solver_maxits\": 500,                              #number of solver iterations\n",
    "                \"mesh_max\": 120e-6,                                #maxiumum element size for the mesh in mm\n",
    "                \"mesh_sampling\": 150,                              #number of points to mesh along a geometry\n",
    "                \"fillet_resolution\":12,                            #number of vertices per quarter turn on a filleted path\n",
    "                \"num_cpus\": 10,                                      #number of CPU cores to use for simulation\n",
    "                \"palace_dir\":path_to_palace\n",
    "                }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creat the Palace Eigenmode simulation\n",
    "cap_sim = PALACE_Capacitance_Simulation(name = 'xmon_cap_sim_GMSH',                                 #name of simulation\n",
    "                                        metal_design = design,                                      #feed in qiskit metal design\n",
    "                                        sim_parent_directory = \"sims/\",            #choose directory where mesh file, config file and HPC batch file will be saved\n",
    "                                        mode = 'simPC',                                             #choose simulation mode 'HPC' or 'simPC'                                          \n",
    "                                        meshing = 'GMSH',                                           #choose meshing 'GMSH' or 'COMSOL'\n",
    "                                        user_options = user_defined_options,                        #provide options chosen above\n",
    "                                        view_design_gmsh_gui = False,                               #view design in GMSH gui \n",
    "                                        create_files = True,\n",
    "                                        )                                        #create mesh, config and HPC batch files\n",
    "\n",
    "cap_sim.add_metallic(1, threshold=1e-10, fuse_threshold=1e-10)\n",
    "cap_sim.add_ground_plane(threshold=1e-10)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To generate a fine mesh around our region of interest, we can use the `fine_mesh_in_rectangle` method by first getting the bounds of the region of interest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.3675, -1.704 ,  0.9277, -1.224 ])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bounds = design.components[\"Q1\"].qgeometry_bounds()\n",
    "bounds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fine-mesh the transmon cross qubit region\n",
    "cap_sim.fine_mesh_in_rectangle(bounds[0]*1e-3, bounds[1]*1e-3, bounds[2]*1e-3, bounds[3]*1e-3, mesh_sampling=100, mesh_min=10e-3, mesh_max=125e-3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "cap_sim.prepare_simulation()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can check to see if all the metal components are correctly identified"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/pdf": "",
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       "  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"406.940312pt\" height=\"282.83625pt\" viewBox=\"0 0 406.940312 282.83625\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n",
       " <metadata>\n",
       "  <rdf:RDF xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n",
       "   <cc:Work>\n",
       "    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n",
       "    <dc:date>2025-05-11T10:32:37.034423</dc:date>\n",
       "    <dc:format>image/svg+xml</dc:format>\n",
       "    <dc:creator>\n",
       "     <cc:Agent>\n",
       "      <dc:title>Matplotlib v3.10.3, https://matplotlib.org/</dc:title>\n",
       "     </cc:Agent>\n",
       "    </dc:creator>\n",
       "   </cc:Work>\n",
       "  </rdf:RDF>\n",
       " </metadata>\n",
       " <defs>\n",
       "  <style type=\"text/css\">*{stroke-linejoin: round; stroke-linecap: butt}</style>\n",
       " </defs>\n",
       " <g id=\"figure_1\">\n",
       "  <g id=\"patch_1\">\n",
       "   <path d=\"M 0 282.83625 \n",
       "L 406.940312 282.83625 \n",
       "L 406.940312 0 \n",
       "L 0 0 \n",
       "z\n",
       "\" style=\"fill: #ffffff\"/>\n",
       "  </g>\n",
       "  <g id=\"axes_1\">\n",
       "   <g id=\"patch_2\">\n",
       "    <path d=\"M 42.620313 245.28 \n",
       "L 399.740313 245.28 \n",
       "L 399.740313 7.2 \n",
       "L 42.620313 7.2 \n",
       "z\n",
       "\" style=\"fill: #ffffff\"/>\n",
       "   </g>\n",
       "   <g id=\"PatchCollection_1\">\n",
       "    <path d=\"M 383.507585 18.021818 \n",
       "L 383.507585 234.458182 \n",
       "L 58.85304 234.458182 \n",
       "L 58.85304 18.021818 \n",
       "L 383.507585 18.021818 \n",
       "M 253.021709 178.595956 \n",
       "L 253.021709 176.15744 \n",
       "L 245.258858 176.15744 \n",
       "L 245.258858 177.066473 \n",
       "L 252.112676 177.066473 \n",
       "L 252.112676 181.034473 \n",
       "L 245.258858 181.034473 \n",
       "L 245.258858 181.943505 \n",
       "L 253.021709 181.943505 \n",
       "L 253.021709 179.504989 \n",
       "L 254.644982 179.504989 \n",
       "L 254.644982 178.595956 \n",
       "L 253.021709 178.595956 \n",
       "M 234.43704 177.4272 \n",
       "L 234.43704 180.673745 \n",
       "L 241.471222 180.673745 \n",
       "L 241.471222 187.707927 \n",
       "L 244.717767 187.707927 \n",
       "L 244.717767 180.673745 \n",
       "L 251.751949 180.673745 \n",
       "L 251.751949 177.4272 \n",
       "L 244.717767 177.4272 \n",
       "L 244.717767 170.393018 \n",
       "L 241.471222 170.393018 \n",
       "L 241.471222 177.4272 \n",
       "L 234.43704 177.4272 \n",
       "\" clip-path=\"url(#pe076d9aa7c)\" style=\"fill: #00d4ff; fill-opacity: 0.5\"/>\n",
       "    <path d=\"M 245.442829 181.218444 \n",
       "L 252.296647 181.218444 \n",
       "L 252.296647 176.882502 \n",
       "L 245.442829 176.882502 \n",
       "L 245.442829 176.341411 \n",
       "L 252.837738 176.341411 \n",
       "L 252.837738 178.779927 \n",
       "L 254.461011 178.779927 \n",
       "L 254.461011 179.321018 \n",
       "L 252.837738 179.321018 \n",
       "L 252.837738 181.759535 \n",
       "L 245.442829 181.759535 \n",
       "L 245.442829 181.218444 \n",
       "\" clip-path=\"url(#pe076d9aa7c)\" style=\"fill: #ffe600; fill-opacity: 0.5\"/>\n",
       "    <path d=\"M 250.669767 178.509382 \n",
       "L 250.669767 179.591564 \n",
       "L 243.635585 179.591564 \n",
       "L 243.635585 186.625745 \n",
       "L 242.553403 186.625745 \n",
       "L 242.553403 179.591564 \n",
       "L 235.519222 179.591564 \n",
       "L 235.519222 178.509382 \n",
       "L 242.553403 178.509382 \n",
       "L 242.553403 171.4752 \n",
       "L 243.635585 171.4752 \n",
       "L 243.635585 178.509382 \n",
       "L 250.669767 178.509382 \n",
       "\" clip-path=\"url(#pe076d9aa7c)\" style=\"fill: #800000; fill-opacity: 0.5\"/>\n",
       "   </g>\n",
       "   <g id=\"matplotlib.axis_1\">\n",
       "    <g id=\"xtick_1\">\n",
       "     <g id=\"line2d_1\">\n",
       "      <defs>\n",
       "       <path id=\"m47dd19241a\" d=\"M 0 0 \n",
       "L 0 3.5 \n",
       "\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </defs>\n",
       "      <g>\n",
       "       <use xlink:href=\"#m47dd19241a\" x=\"76.889403\" y=\"245.28\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_1\">\n",
       "      <!-- −4 -->\n",
       "      <g transform=\"translate(69.51831 259.878437) scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path id=\"DejaVuSans-2212\" d=\"M 678 2272 \n",
       "L 4684 2272 \n",
       "L 4684 1741 \n",
       "L 678 1741 \n",
       "L 678 2272 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "        <path id=\"DejaVuSans-34\" d=\"M 2419 4116 \n",
       "L 825 1625 \n",
       "L 2419 1625 \n",
       "L 2419 4116 \n",
       "z\n",
       "M 2253 4666 \n",
       "L 3047 4666 \n",
       "L 3047 1625 \n",
       "L 3713 1625 \n",
       "L 3713 1100 \n",
       "L 3047 1100 \n",
       "L 3047 0 \n",
       "L 2419 0 \n",
       "L 2419 1100 \n",
       "L 313 1100 \n",
       "L 313 1709 \n",
       "L 2253 4666 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-2212\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-34\" transform=\"translate(83.789062 0)\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"xtick_2\">\n",
       "     <g id=\"line2d_2\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#m47dd19241a\" x=\"149.034858\" y=\"245.28\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_2\">\n",
       "      <!-- −2 -->\n",
       "      <g transform=\"translate(141.663764 259.878437) scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path id=\"DejaVuSans-32\" d=\"M 1228 531 \n",
       "L 3431 531 \n",
       "L 3431 0 \n",
       "L 469 0 \n",
       "L 469 531 \n",
       "Q 828 903 1448 1529 \n",
       "Q 2069 2156 2228 2338 \n",
       "Q 2531 2678 2651 2914 \n",
       "Q 2772 3150 2772 3378 \n",
       "Q 2772 3750 2511 3984 \n",
       "Q 2250 4219 1831 4219 \n",
       "Q 1534 4219 1204 4116 \n",
       "Q 875 4013 500 3803 \n",
       "L 500 4441 \n",
       "Q 881 4594 1212 4672 \n",
       "Q 1544 4750 1819 4750 \n",
       "Q 2544 4750 2975 4387 \n",
       "Q 3406 4025 3406 3419 \n",
       "Q 3406 3131 3298 2873 \n",
       "Q 3191 2616 2906 2266 \n",
       "Q 2828 2175 2409 1742 \n",
       "Q 1991 1309 1228 531 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-2212\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-32\" transform=\"translate(83.789062 0)\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"xtick_3\">\n",
       "     <g id=\"line2d_3\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#m47dd19241a\" x=\"221.180313\" y=\"245.28\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_3\">\n",
       "      <!-- 0 -->\n",
       "      <g transform=\"translate(217.999063 259.878437) scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path id=\"DejaVuSans-30\" d=\"M 2034 4250 \n",
       "Q 1547 4250 1301 3770 \n",
       "Q 1056 3291 1056 2328 \n",
       "Q 1056 1369 1301 889 \n",
       "Q 1547 409 2034 409 \n",
       "Q 2525 409 2770 889 \n",
       "Q 3016 1369 3016 2328 \n",
       "Q 3016 3291 2770 3770 \n",
       "Q 2525 4250 2034 4250 \n",
       "z\n",
       "M 2034 4750 \n",
       "Q 2819 4750 3233 4129 \n",
       "Q 3647 3509 3647 2328 \n",
       "Q 3647 1150 3233 529 \n",
       "Q 2819 -91 2034 -91 \n",
       "Q 1250 -91 836 529 \n",
       "Q 422 1150 422 2328 \n",
       "Q 422 3509 836 4129 \n",
       "Q 1250 4750 2034 4750 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"xtick_4\">\n",
       "     <g id=\"line2d_4\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#m47dd19241a\" x=\"293.325767\" y=\"245.28\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_4\">\n",
       "      <!-- 2 -->\n",
       "      <g transform=\"translate(290.144517 259.878437) scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"xtick_5\">\n",
       "     <g id=\"line2d_5\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#m47dd19241a\" x=\"365.471222\" y=\"245.28\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_5\">\n",
       "      <!-- 4 -->\n",
       "      <g transform=\"translate(362.289972 259.878437) scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-34\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"text_6\">\n",
       "     <!-- Position (m) -->\n",
       "     <g transform=\"translate(191.355313 273.556562) scale(0.1 -0.1)\">\n",
       "      <defs>\n",
       "       <path id=\"DejaVuSans-50\" d=\"M 1259 4147 \n",
       "L 1259 2394 \n",
       "L 2053 2394 \n",
       "Q 2494 2394 2734 2622 \n",
       "Q 2975 2850 2975 3272 \n",
       "Q 2975 3691 2734 3919 \n",
       "Q 2494 4147 2053 4147 \n",
       "L 1259 4147 \n",
       "z\n",
       "M 628 4666 \n",
       "L 2053 4666 \n",
       "Q 2838 4666 3239 4311 \n",
       "Q 3641 3956 3641 3272 \n",
       "Q 3641 2581 3239 2228 \n",
       "Q 2838 1875 2053 1875 \n",
       "L 1259 1875 \n",
       "L 1259 0 \n",
       "L 628 0 \n",
       "L 628 4666 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       <path id=\"DejaVuSans-6f\" d=\"M 1959 3097 \n",
       "Q 1497 3097 1228 2736 \n",
       "Q 959 2375 959 1747 \n",
       "Q 959 1119 1226 758 \n",
       "Q 1494 397 1959 397 \n",
       "Q 2419 397 2687 759 \n",
       "Q 2956 1122 2956 1747 \n",
       "Q 2956 2369 2687 2733 \n",
       "Q 2419 3097 1959 3097 \n",
       "z\n",
       "M 1959 3584 \n",
       "Q 2709 3584 3137 3096 \n",
       "Q 3566 2609 3566 1747 \n",
       "Q 3566 888 3137 398 \n",
       "Q 2709 -91 1959 -91 \n",
       "Q 1206 -91 779 398 \n",
       "Q 353 888 353 1747 \n",
       "Q 353 2609 779 3096 \n",
       "Q 1206 3584 1959 3584 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       <path id=\"DejaVuSans-73\" d=\"M 2834 3397 \n",
       "L 2834 2853 \n",
       "Q 2591 2978 2328 3040 \n",
       "Q 2066 3103 1784 3103 \n",
       "Q 1356 3103 1142 2972 \n",
       "Q 928 2841 928 2578 \n",
       "Q 928 2378 1081 2264 \n",
       "Q 1234 2150 1697 2047 \n",
       "L 1894 2003 \n",
       "Q 2506 1872 2764 1633 \n",
       "Q 3022 1394 3022 966 \n",
       "Q 3022 478 2636 193 \n",
       "Q 2250 -91 1575 -91 \n",
       "Q 1294 -91 989 -36 \n",
       "Q 684 19 347 128 \n",
       "L 347 722 \n",
       "Q 666 556 975 473 \n",
       "Q 1284 391 1588 391 \n",
       "Q 1994 391 2212 530 \n",
       "Q 2431 669 2431 922 \n",
       "Q 2431 1156 2273 1281 \n",
       "Q 2116 1406 1581 1522 \n",
       "L 1381 1569 \n",
       "Q 847 1681 609 1914 \n",
       "Q 372 2147 372 2553 \n",
       "Q 372 3047 722 3315 \n",
       "Q 1072 3584 1716 3584 \n",
       "Q 2034 3584 2315 3537 \n",
       "Q 2597 3491 2834 3397 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       <path id=\"DejaVuSans-69\" d=\"M 603 3500 \n",
       "L 1178 3500 \n",
       "L 1178 0 \n",
       "L 603 0 \n",
       "L 603 3500 \n",
       "z\n",
       "M 603 4863 \n",
       "L 1178 4863 \n",
       "L 1178 4134 \n",
       "L 603 4134 \n",
       "L 603 4863 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       <path id=\"DejaVuSans-74\" d=\"M 1172 4494 \n",
       "L 1172 3500 \n",
       "L 2356 3500 \n",
       "L 2356 3053 \n",
       "L 1172 3053 \n",
       "L 1172 1153 \n",
       "Q 1172 725 1289 603 \n",
       "Q 1406 481 1766 481 \n",
       "L 2356 481 \n",
       "L 2356 0 \n",
       "L 1766 0 \n",
       "Q 1100 0 847 248 \n",
       "Q 594 497 594 1153 \n",
       "L 594 3053 \n",
       "L 172 3053 \n",
       "L 172 3500 \n",
       "L 594 3500 \n",
       "L 594 4494 \n",
       "L 1172 4494 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       <path id=\"DejaVuSans-6e\" d=\"M 3513 2113 \n",
       "L 3513 0 \n",
       "L 2938 0 \n",
       "L 2938 2094 \n",
       "Q 2938 2591 2744 2837 \n",
       "Q 2550 3084 2163 3084 \n",
       "Q 1697 3084 1428 2787 \n",
       "Q 1159 2491 1159 1978 \n",
       "L 1159 0 \n",
       "L 581 0 \n",
       "L 581 3500 \n",
       "L 1159 3500 \n",
       "L 1159 2956 \n",
       "Q 1366 3272 1645 3428 \n",
       "Q 1925 3584 2291 3584 \n",
       "Q 2894 3584 3203 3211 \n",
       "Q 3513 2838 3513 2113 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       <path id=\"DejaVuSans-20\" transform=\"scale(0.015625)\"/>\n",
       "       <path id=\"DejaVuSans-28\" d=\"M 1984 4856 \n",
       "Q 1566 4138 1362 3434 \n",
       "Q 1159 2731 1159 2009 \n",
       "Q 1159 1288 1364 580 \n",
       "Q 1569 -128 1984 -844 \n",
       "L 1484 -844 \n",
       "Q 1016 -109 783 600 \n",
       "Q 550 1309 550 2009 \n",
       "Q 550 2706 781 3412 \n",
       "Q 1013 4119 1484 4856 \n",
       "L 1984 4856 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       <path id=\"DejaVuSans-6d\" d=\"M 3328 2828 \n",
       "Q 3544 3216 3844 3400 \n",
       "Q 4144 3584 4550 3584 \n",
       "Q 5097 3584 5394 3201 \n",
       "Q 5691 2819 5691 2113 \n",
       "L 5691 0 \n",
       "L 5113 0 \n",
       "L 5113 2094 \n",
       "Q 5113 2597 4934 2840 \n",
       "Q 4756 3084 4391 3084 \n",
       "Q 3944 3084 3684 2787 \n",
       "Q 3425 2491 3425 1978 \n",
       "L 3425 0 \n",
       "L 2847 0 \n",
       "L 2847 2094 \n",
       "Q 2847 2600 2669 2842 \n",
       "Q 2491 3084 2119 3084 \n",
       "Q 1678 3084 1418 2786 \n",
       "Q 1159 2488 1159 1978 \n",
       "L 1159 0 \n",
       "L 581 0 \n",
       "L 581 3500 \n",
       "L 1159 3500 \n",
       "L 1159 2956 \n",
       "Q 1356 3278 1631 3431 \n",
       "Q 1906 3584 2284 3584 \n",
       "Q 2666 3584 2933 3390 \n",
       "Q 3200 3197 3328 2828 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       <path id=\"DejaVuSans-29\" d=\"M 513 4856 \n",
       "L 1013 4856 \n",
       "Q 1481 4119 1714 3412 \n",
       "Q 1947 2706 1947 2009 \n",
       "Q 1947 1309 1714 600 \n",
       "Q 1481 -109 1013 -844 \n",
       "L 513 -844 \n",
       "Q 928 -128 1133 580 \n",
       "Q 1338 1288 1338 2009 \n",
       "Q 1338 2731 1133 3434 \n",
       "Q 928 4138 513 4856 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      </defs>\n",
       "      <use xlink:href=\"#DejaVuSans-50\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(56.677734 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-73\" transform=\"translate(117.859375 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-69\" transform=\"translate(169.958984 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-74\" transform=\"translate(197.742188 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-69\" transform=\"translate(236.951172 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(264.734375 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-6e\" transform=\"translate(325.916016 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-20\" transform=\"translate(389.294922 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-28\" transform=\"translate(421.082031 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-6d\" transform=\"translate(460.095703 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-29\" transform=\"translate(557.507812 0)\"/>\n",
       "     </g>\n",
       "    </g>\n",
       "   </g>\n",
       "   <g id=\"matplotlib.axis_2\">\n",
       "    <g id=\"ytick_1\">\n",
       "     <g id=\"line2d_6\">\n",
       "      <defs>\n",
       "       <path id=\"m1ed67a82a7\" d=\"M 0 0 \n",
       "L -3.5 0 \n",
       "\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </defs>\n",
       "      <g>\n",
       "       <use xlink:href=\"#m1ed67a82a7\" x=\"42.620313\" y=\"234.458182\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_7\">\n",
       "      <!-- −3 -->\n",
       "      <g transform=\"translate(20.878125 238.257401) scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path id=\"DejaVuSans-33\" d=\"M 2597 2516 \n",
       "Q 3050 2419 3304 2112 \n",
       "Q 3559 1806 3559 1356 \n",
       "Q 3559 666 3084 287 \n",
       "Q 2609 -91 1734 -91 \n",
       "Q 1441 -91 1130 -33 \n",
       "Q 819 25 488 141 \n",
       "L 488 750 \n",
       "Q 750 597 1062 519 \n",
       "Q 1375 441 1716 441 \n",
       "Q 2309 441 2620 675 \n",
       "Q 2931 909 2931 1356 \n",
       "Q 2931 1769 2642 2001 \n",
       "Q 2353 2234 1838 2234 \n",
       "L 1294 2234 \n",
       "L 1294 2753 \n",
       "L 1863 2753 \n",
       "Q 2328 2753 2575 2939 \n",
       "Q 2822 3125 2822 3475 \n",
       "Q 2822 3834 2567 4026 \n",
       "Q 2313 4219 1838 4219 \n",
       "Q 1578 4219 1281 4162 \n",
       "Q 984 4106 628 3988 \n",
       "L 628 4550 \n",
       "Q 988 4650 1302 4700 \n",
       "Q 1616 4750 1894 4750 \n",
       "Q 2613 4750 3031 4423 \n",
       "Q 3450 4097 3450 3541 \n",
       "Q 3450 3153 3228 2886 \n",
       "Q 3006 2619 2597 2516 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-2212\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-33\" transform=\"translate(83.789062 0)\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_2\">\n",
       "     <g id=\"line2d_7\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#m1ed67a82a7\" x=\"42.620313\" y=\"198.385455\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_8\">\n",
       "      <!-- −2 -->\n",
       "      <g transform=\"translate(20.878125 202.184673) scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-2212\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-32\" transform=\"translate(83.789062 0)\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_3\">\n",
       "     <g id=\"line2d_8\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#m1ed67a82a7\" x=\"42.620313\" y=\"162.312727\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_9\">\n",
       "      <!-- −1 -->\n",
       "      <g transform=\"translate(20.878125 166.111946) scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path id=\"DejaVuSans-31\" d=\"M 794 531 \n",
       "L 1825 531 \n",
       "L 1825 4091 \n",
       "L 703 3866 \n",
       "L 703 4441 \n",
       "L 1819 4666 \n",
       "L 2450 4666 \n",
       "L 2450 531 \n",
       "L 3481 531 \n",
       "L 3481 0 \n",
       "L 794 0 \n",
       "L 794 531 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-2212\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-31\" transform=\"translate(83.789062 0)\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_4\">\n",
       "     <g id=\"line2d_9\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#m1ed67a82a7\" x=\"42.620313\" y=\"126.24\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_10\">\n",
       "      <!-- 0 -->\n",
       "      <g transform=\"translate(29.257813 130.039219) scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_5\">\n",
       "     <g id=\"line2d_10\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#m1ed67a82a7\" x=\"42.620313\" y=\"90.167273\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_11\">\n",
       "      <!-- 1 -->\n",
       "      <g transform=\"translate(29.257813 93.966491) scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_6\">\n",
       "     <g id=\"line2d_11\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#m1ed67a82a7\" x=\"42.620313\" y=\"54.094545\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_12\">\n",
       "      <!-- 2 -->\n",
       "      <g transform=\"translate(29.257813 57.893764) scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_7\">\n",
       "     <g id=\"line2d_12\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#m1ed67a82a7\" x=\"42.620313\" y=\"18.021818\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_13\">\n",
       "      <!-- 3 -->\n",
       "      <g transform=\"translate(29.257813 21.821037) scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-33\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"text_14\">\n",
       "     <!-- Position (m) -->\n",
       "     <g transform=\"translate(14.798438 156.065) rotate(-90) scale(0.1 -0.1)\">\n",
       "      <use xlink:href=\"#DejaVuSans-50\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(56.677734 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-73\" transform=\"translate(117.859375 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-69\" transform=\"translate(169.958984 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-74\" transform=\"translate(197.742188 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-69\" transform=\"translate(236.951172 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(264.734375 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-6e\" transform=\"translate(325.916016 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-20\" transform=\"translate(389.294922 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-28\" transform=\"translate(421.082031 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-6d\" transform=\"translate(460.095703 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-29\" transform=\"translate(557.507812 0)\"/>\n",
       "     </g>\n",
       "    </g>\n",
       "   </g>\n",
       "   <g id=\"LineCollection_1\">\n",
       "    <path d=\"M 221.017985 126.348218 \n",
       "L 221.34264 126.348218 \n",
       "L 221.34264 126.131782 \n",
       "L 221.017985 126.131782 \n",
       "L 221.017985 126.348218 \n",
       "\" clip-path=\"url(#pe076d9aa7c)\" style=\"fill: none; stroke: #000080; stroke-opacity: 0.5; stroke-width: 1.5\"/>\n",
       "   </g>\n",
       "   <g id=\"patch_3\">\n",
       "    <path d=\"M 42.620313 245.28 \n",
       "L 42.620313 7.2 \n",
       "\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n",
       "   </g>\n",
       "   <g id=\"patch_4\">\n",
       "    <path d=\"M 399.740313 245.28 \n",
       "L 399.740313 7.2 \n",
       "\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n",
       "   </g>\n",
       "   <g id=\"patch_5\">\n",
       "    <path d=\"M 42.620313 245.28 \n",
       "L 399.740313 245.28 \n",
       "\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n",
       "   </g>\n",
       "   <g id=\"patch_6\">\n",
       "    <path d=\"M 42.620313 7.2 \n",
       "L 399.740313 7.2 \n",
       "\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n",
       "   </g>\n",
       "   <g id=\"legend_1\">\n",
       "    <g id=\"patch_7\">\n",
       "     <path d=\"M 328.590313 73.9125 \n",
       "L 392.740313 73.9125 \n",
       "Q 394.740313 73.9125 394.740313 71.9125 \n",
       "L 394.740313 14.2 \n",
       "Q 394.740313 12.2 392.740313 12.2 \n",
       "L 328.590313 12.2 \n",
       "Q 326.590313 12.2 326.590313 14.2 \n",
       "L 326.590313 71.9125 \n",
       "Q 326.590313 73.9125 328.590313 73.9125 \n",
       "z\n",
       "\" style=\"fill: #ffffff; opacity: 0.8; stroke: #cccccc; stroke-linejoin: miter\"/>\n",
       "    </g>\n",
       "    <g id=\"line2d_13\">\n",
       "     <defs>\n",
       "      <path id=\"m36dcdef902\" d=\"M 0 5 \n",
       "C 1.326016 5 2.597899 4.473168 3.535534 3.535534 \n",
       "C 4.473168 2.597899 5 1.326016 5 0 \n",
       "C 5 -1.326016 4.473168 -2.597899 3.535534 -3.535534 \n",
       "C 2.597899 -4.473168 1.326016 -5 0 -5 \n",
       "C -1.326016 -5 -2.597899 -4.473168 -3.535534 -3.535534 \n",
       "C -4.473168 -2.597899 -5 -1.326016 -5 0 \n",
       "C -5 1.326016 -4.473168 2.597899 -3.535534 3.535534 \n",
       "C -2.597899 4.473168 -1.326016 5 0 5 \n",
       "z\n",
       "\"/>\n",
       "     </defs>\n",
       "     <g>\n",
       "      <use xlink:href=\"#m36dcdef902\" x=\"340.590313\" y=\"20.298437\" style=\"fill: #000080; fill-opacity: 0.5\"/>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"text_15\">\n",
       "     <!-- Chip -->\n",
       "     <g transform=\"translate(358.590313 23.798437) scale(0.1 -0.1)\">\n",
       "      <defs>\n",
       "       <path id=\"DejaVuSans-43\" d=\"M 4122 4306 \n",
       "L 4122 3641 \n",
       "Q 3803 3938 3442 4084 \n",
       "Q 3081 4231 2675 4231 \n",
       "Q 1875 4231 1450 3742 \n",
       "Q 1025 3253 1025 2328 \n",
       "Q 1025 1406 1450 917 \n",
       "Q 1875 428 2675 428 \n",
       "Q 3081 428 3442 575 \n",
       "Q 3803 722 4122 1019 \n",
       "L 4122 359 \n",
       "Q 3791 134 3420 21 \n",
       "Q 3050 -91 2638 -91 \n",
       "Q 1578 -91 968 557 \n",
       "Q 359 1206 359 2328 \n",
       "Q 359 3453 968 4101 \n",
       "Q 1578 4750 2638 4750 \n",
       "Q 3056 4750 3426 4639 \n",
       "Q 3797 4528 4122 4306 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       <path id=\"DejaVuSans-68\" d=\"M 3513 2113 \n",
       "L 3513 0 \n",
       "L 2938 0 \n",
       "L 2938 2094 \n",
       "Q 2938 2591 2744 2837 \n",
       "Q 2550 3084 2163 3084 \n",
       "Q 1697 3084 1428 2787 \n",
       "Q 1159 2491 1159 1978 \n",
       "L 1159 0 \n",
       "L 581 0 \n",
       "L 581 4863 \n",
       "L 1159 4863 \n",
       "L 1159 2956 \n",
       "Q 1366 3272 1645 3428 \n",
       "Q 1925 3584 2291 3584 \n",
       "Q 2894 3584 3203 3211 \n",
       "Q 3513 2838 3513 2113 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       <path id=\"DejaVuSans-70\" d=\"M 1159 525 \n",
       "L 1159 -1331 \n",
       "L 581 -1331 \n",
       "L 581 3500 \n",
       "L 1159 3500 \n",
       "L 1159 2969 \n",
       "Q 1341 3281 1617 3432 \n",
       "Q 1894 3584 2278 3584 \n",
       "Q 2916 3584 3314 3078 \n",
       "Q 3713 2572 3713 1747 \n",
       "Q 3713 922 3314 415 \n",
       "Q 2916 -91 2278 -91 \n",
       "Q 1894 -91 1617 61 \n",
       "Q 1341 213 1159 525 \n",
       "z\n",
       "M 3116 1747 \n",
       "Q 3116 2381 2855 2742 \n",
       "Q 2594 3103 2138 3103 \n",
       "Q 1681 3103 1420 2742 \n",
       "Q 1159 2381 1159 1747 \n",
       "Q 1159 1113 1420 752 \n",
       "Q 1681 391 2138 391 \n",
       "Q 2594 391 2855 752 \n",
       "Q 3116 1113 3116 1747 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      </defs>\n",
       "      <use xlink:href=\"#DejaVuSans-43\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-68\" transform=\"translate(69.824219 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-69\" transform=\"translate(133.203125 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-70\" transform=\"translate(160.986328 0)\"/>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"line2d_14\">\n",
       "     <defs>\n",
       "      <path id=\"m733670c432\" d=\"M 0 5 \n",
       "C 1.326016 5 2.597899 4.473168 3.535534 3.535534 \n",
       "C 4.473168 2.597899 5 1.326016 5 0 \n",
       "C 5 -1.326016 4.473168 -2.597899 3.535534 -3.535534 \n",
       "C 2.597899 -4.473168 1.326016 -5 0 -5 \n",
       "C -1.326016 -5 -2.597899 -4.473168 -3.535534 -3.535534 \n",
       "C -4.473168 -2.597899 -5 -1.326016 -5 0 \n",
       "C -5 1.326016 -4.473168 2.597899 -3.535534 3.535534 \n",
       "C -2.597899 4.473168 -1.326016 5 0 5 \n",
       "z\n",
       "\"/>\n",
       "     </defs>\n",
       "     <g>\n",
       "      <use xlink:href=\"#m733670c432\" x=\"340.590313\" y=\"34.976562\" style=\"fill: #00d4ff; fill-opacity: 0.5\"/>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"text_16\">\n",
       "     <!-- Cond1 -->\n",
       "     <g transform=\"translate(358.590313 38.476562) scale(0.1 -0.1)\">\n",
       "      <defs>\n",
       "       <path id=\"DejaVuSans-64\" d=\"M 2906 2969 \n",
       "L 2906 4863 \n",
       "L 3481 4863 \n",
       "L 3481 0 \n",
       "L 2906 0 \n",
       "L 2906 525 \n",
       "Q 2725 213 2448 61 \n",
       "Q 2172 -91 1784 -91 \n",
       "Q 1150 -91 751 415 \n",
       "Q 353 922 353 1747 \n",
       "Q 353 2572 751 3078 \n",
       "Q 1150 3584 1784 3584 \n",
       "Q 2172 3584 2448 3432 \n",
       "Q 2725 3281 2906 2969 \n",
       "z\n",
       "M 947 1747 \n",
       "Q 947 1113 1208 752 \n",
       "Q 1469 391 1925 391 \n",
       "Q 2381 391 2643 752 \n",
       "Q 2906 1113 2906 1747 \n",
       "Q 2906 2381 2643 2742 \n",
       "Q 2381 3103 1925 3103 \n",
       "Q 1469 3103 1208 2742 \n",
       "Q 947 2381 947 1747 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      </defs>\n",
       "      <use xlink:href=\"#DejaVuSans-43\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(69.824219 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-6e\" transform=\"translate(131.005859 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-64\" transform=\"translate(194.384766 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-31\" transform=\"translate(257.861328 0)\"/>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"line2d_15\">\n",
       "     <defs>\n",
       "      <path id=\"me9b0900353\" d=\"M 0 5 \n",
       "C 1.326016 5 2.597899 4.473168 3.535534 3.535534 \n",
       "C 4.473168 2.597899 5 1.326016 5 0 \n",
       "C 5 -1.326016 4.473168 -2.597899 3.535534 -3.535534 \n",
       "C 2.597899 -4.473168 1.326016 -5 0 -5 \n",
       "C -1.326016 -5 -2.597899 -4.473168 -3.535534 -3.535534 \n",
       "C -4.473168 -2.597899 -5 -1.326016 -5 0 \n",
       "C -5 1.326016 -4.473168 2.597899 -3.535534 3.535534 \n",
       "C -2.597899 4.473168 -1.326016 5 0 5 \n",
       "z\n",
       "\"/>\n",
       "     </defs>\n",
       "     <g>\n",
       "      <use xlink:href=\"#me9b0900353\" x=\"340.590313\" y=\"49.654687\" style=\"fill: #ffe600; fill-opacity: 0.5\"/>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"text_17\">\n",
       "     <!-- Cond2 -->\n",
       "     <g transform=\"translate(358.590313 53.154687) scale(0.1 -0.1)\">\n",
       "      <use xlink:href=\"#DejaVuSans-43\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(69.824219 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-6e\" transform=\"translate(131.005859 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-64\" transform=\"translate(194.384766 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-32\" transform=\"translate(257.861328 0)\"/>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"line2d_16\">\n",
       "     <defs>\n",
       "      <path id=\"mc674369460\" d=\"M 0 5 \n",
       "C 1.326016 5 2.597899 4.473168 3.535534 3.535534 \n",
       "C 4.473168 2.597899 5 1.326016 5 0 \n",
       "C 5 -1.326016 4.473168 -2.597899 3.535534 -3.535534 \n",
       "C 2.597899 -4.473168 1.326016 -5 0 -5 \n",
       "C -1.326016 -5 -2.597899 -4.473168 -3.535534 -3.535534 \n",
       "C -4.473168 -2.597899 -5 -1.326016 -5 0 \n",
       "C -5 1.326016 -4.473168 2.597899 -3.535534 3.535534 \n",
       "C -2.597899 4.473168 -1.326016 5 0 5 \n",
       "z\n",
       "\"/>\n",
       "     </defs>\n",
       "     <g>\n",
       "      <use xlink:href=\"#mc674369460\" x=\"340.590313\" y=\"64.332812\" style=\"fill: #800000; fill-opacity: 0.5\"/>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"text_18\">\n",
       "     <!-- Cond3 -->\n",
       "     <g transform=\"translate(358.590313 67.832812) scale(0.1 -0.1)\">\n",
       "      <use xlink:href=\"#DejaVuSans-43\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(69.824219 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-6e\" transform=\"translate(131.005859 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-64\" transform=\"translate(194.384766 0)\"/>\n",
       "      <use xlink:href=\"#DejaVuSans-33\" transform=\"translate(257.861328 0)\"/>\n",
       "     </g>\n",
       "    </g>\n",
       "   </g>\n",
       "  </g>\n",
       " </g>\n",
       " <defs>\n",
       "  <clipPath id=\"pe076d9aa7c\">\n",
       "   <rect x=\"42.620313\" y=\"7.2\" width=\"357.12\" height=\"238.08\"/>\n",
       "  </clipPath>\n",
       " </defs>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<Figure size 1280x960 with 1 Axes>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cap_sim.display_conductor_indices()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similarly, you can verify the mesh is correct by visualizing the mesh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from SQDMetal.PALACE.Utilities.GMSH_Navigator import GMSH_Navigator\n",
    "\n",
    "gmsh_nav = GMSH_Navigator(cap_sim.path_mesh)\n",
    "gmsh_nav.open_GUI()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If all looks good, you can run the simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">> /opt/homebrew/bin/mpirun -n 10 /Users/shanto/LFL/palace/build/bin/palace-arm64.bin xmon_cap_sim_GMSH.json\n",
      "\n",
      "_____________     _______\n",
      "_____   __   \\____ __   /____ ____________\n",
      "____   /_/  /  __ ` /  /  __ ` /  ___/  _ \\\n",
      "___   _____/  /_/  /  /  /_/  /  /__/  ___/\n",
      "  /__/     \\___,__/__/\\___,__/\\_____\\_____/\n",
      "\n",
      "Git changeset ID: v0.13.0-117-g748660c\n",
      "Running with 10 MPI processes\n",
      "Device configuration: cpu\n",
      "Memory configuration: host-std\n",
      "libCEED backend: /cpu/self/xsmm/blocked\n",
      "\n",
      "Added 369 elements in 2 iterations of local bisection for under-resolved interior boundaries\n",
      "Added 7772 duplicate vertices for interior boundaries in the mesh\n",
      "Added 16409 duplicate boundary elements for interior boundaries in the mesh\n",
      "Added 4040 boundary elements for material interfaces to the mesh\n",
      "Finished partitioning mesh into 10 subdomains\n",
      "\n",
      "Characteristic length and time scales:\n",
      " L₀ = 1.080e-02 m, t₀ = 3.602e-02 ns\n",
      "\n",
      "Mesh curvature order: 1\n",
      "Mesh bounding box:\n",
      " (Xmin, Ymin, Zmin) = (-5.400e-03, -3.600e-03, -7.500e-04) m\n",
      " (Xmax, Ymax, Zmax) = (+5.400e-03, +3.600e-03, +7.500e-04) m\n",
      "\n",
      "Parallel Mesh Stats:\n",
      "\n",
      "                minimum     average     maximum       total\n",
      " vertices          7422        7920        8388       79201\n",
      " edges            48320       49915       51242      499150\n",
      " faces            79214       80632       81980      806329\n",
      " elements         38316       38637       39385      386378\n",
      " neighbors            2           4           7\n",
      "\n",
      "            minimum     maximum\n",
      " h      0.000552426   0.0217216\n",
      " kappa      1.01738     11.1252\n",
      "\n",
      "Configuring Dirichlet BC at attributes:\n",
      " 7, 1-3\n",
      "\n",
      "Assembling system matrices, number of global unknowns:\n",
      " H1 (p = 1): 79201, ND (p = 1): 499150, RT (p = 1): 806329\n",
      " Operator assembly level: Partial\n",
      " Mesh geometries:\n",
      "  Tetrahedron: P = 6, Q = 4 (quadrature order = 2)\n",
      "\n",
      "Assembling multigrid hierarchy:\n",
      " Level 0 (p = 1): 79201 unknowns, 1105237 NNZ\n",
      "\n",
      "Computing electrostatic fields for 3 terminal boundaries\n",
      "\n",
      "It 1/3: Index = 1 (elapsed time = 0.00e+00 s)\n",
      "\n",
      "  Residual norms for PCG solve\n",
      "  0 KSP residual norm ||r||_B = 1.990521e+01\n",
      "  1 KSP residual norm ||r||_B = 1.819635e+00\n",
      "  2 KSP residual norm ||r||_B = 2.004853e-01\n",
      "  3 KSP residual norm ||r||_B = 3.448215e-02\n",
      "  4 KSP residual norm ||r||_B = 5.786581e-03\n",
      "  5 KSP residual norm ||r||_B = 9.102787e-04\n",
      "  6 KSP residual norm ||r||_B = 1.491365e-04\n",
      "  7 KSP residual norm ||r||_B = 2.723162e-05\n",
      "  8 KSP residual norm ||r||_B = 4.884593e-06\n",
      "  9 KSP residual norm ||r||_B = 8.463240e-07\n",
      "PCG solver converged in 9 iterations (avg. reduction factor: 1.236e-01)\n",
      " Sol. ||V|| = 1.770460e+02 (||RHS|| = 1.249420e+02)\n",
      " Field energy E = 1.624e+00 J\n",
      " Updating solution error estimates\n",
      " Wrote fields to disk for terminal 1\n",
      "\n",
      "It 2/3: Index = 2 (elapsed time = 2.28e+00 s)\n",
      "\n",
      "  Residual norms for PCG solve\n",
      "  0 KSP residual norm ||r||_B = 8.173841e-01\n",
      "  1 KSP residual norm ||r||_B = 8.983963e-02\n",
      "  2 KSP residual norm ||r||_B = 1.454760e-02\n",
      "  3 KSP residual norm ||r||_B = 2.128182e-03\n",
      "  4 KSP residual norm ||r||_B = 3.333766e-04\n",
      "  5 KSP residual norm ||r||_B = 6.577703e-05\n",
      "  6 KSP residual norm ||r||_B = 1.180018e-05\n",
      "  7 KSP residual norm ||r||_B = 1.987690e-06\n",
      "  8 KSP residual norm ||r||_B = 3.601812e-07\n",
      "  9 KSP residual norm ||r||_B = 6.149758e-08\n",
      "PCG solver converged in 9 iterations (avg. reduction factor: 1.164e-01)\n",
      " Sol. ||V|| = 1.812398e+01 (||RHS|| = 1.571719e+01)\n",
      " Field energy E = 4.756e-02 J\n",
      " Updating solution error estimates\n",
      " Wrote fields to disk for terminal 2\n",
      "\n",
      "It 3/3: Index = 3 (elapsed time = 4.44e+00 s)\n",
      "\n",
      "  Residual norms for PCG solve\n",
      "  0 KSP residual norm ||r||_B = 1.826447e+00\n",
      "  1 KSP residual norm ||r||_B = 2.466585e-01\n",
      "  2 KSP residual norm ||r||_B = 4.728945e-02\n",
      "  3 KSP residual norm ||r||_B = 7.134869e-03\n",
      "  4 KSP residual norm ||r||_B = 1.244552e-03\n",
      "  5 KSP residual norm ||r||_B = 2.185094e-04\n",
      "  6 KSP residual norm ||r||_B = 3.939749e-05\n",
      "  7 KSP residual norm ||r||_B = 7.145503e-06\n",
      "  8 KSP residual norm ||r||_B = 1.180785e-06\n",
      "  9 KSP residual norm ||r||_B = 2.068803e-07\n",
      "PCG solver converged in 9 iterations (avg. reduction factor: 1.260e-01)\n",
      " Sol. ||V|| = 3.791320e+01 (||RHS|| = 2.584766e+01)\n",
      " Field energy E = 2.559e-02 J\n",
      " Updating solution error estimates\n",
      " Wrote fields to disk for terminal 3\n",
      "\n",
      "Completed 0 iterations of adaptive mesh refinement (AMR):\n",
      " Indicator norm = 5.098e-01, global unknowns = 79201\n",
      " Max. iterations = 0, tol. = 1.000e-02\n",
      "\n",
      "Elapsed Time Report (s)           Min.        Max.        Avg.\n",
      "==============================================================\n",
      "Initialization                   7.757       7.764       7.759\n",
      "Operator Construction            0.524       0.563       0.543\n",
      "Linear Solve                     0.232       0.285       0.256\n",
      "  Setup                          0.018       0.020       0.019\n",
      "  Preconditioner                 0.650       0.693       0.668\n",
      "Estimation                       0.098       0.139       0.122\n",
      "  Construction                   3.891       3.893       3.891\n",
      "  Solve                          2.377       2.378       2.378\n",
      "Postprocessing                   0.502       0.538       0.519\n",
      "Disk IO                          4.983       5.007       4.994\n",
      "--------------------------------------------------------------\n",
      "Total                           21.210      21.233      21.227\n",
      "\n",
      "Error in plotting: 'Data array (V) not present in this dataset.'\n"
     ]
    }
   ],
   "source": [
    "cap_matrix =cap_sim.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ground</th>\n",
       "      <th>claw</th>\n",
       "      <th>cross</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ground</th>\n",
       "      <td>8.621504e-12</td>\n",
       "      <td>-2.458660e-13</td>\n",
       "      <td>-1.239444e-13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>claw</th>\n",
       "      <td>-2.458660e-13</td>\n",
       "      <td>2.524815e-13</td>\n",
       "      <td>-4.830456e-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cross</th>\n",
       "      <td>-1.239444e-13</td>\n",
       "      <td>-4.830456e-15</td>\n",
       "      <td>1.358696e-13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              ground          claw         cross\n",
       "ground  8.621504e-12 -2.458660e-13 -1.239444e-13\n",
       "claw   -2.458660e-13  2.524815e-13 -4.830456e-15\n",
       "cross  -1.239444e-13 -4.830456e-15  1.358696e-13"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cdf = pd.DataFrame(cap_matrix)\n",
    "\n",
    "# get rid of the first column\n",
    "cdf = cdf.iloc[:, 1:]\n",
    " \n",
    "# assigning the columns and indices based on our geometry\n",
    "cdf.columns = [\"ground\", \"claw\", \"cross\"]\n",
    "cdf.index = [\"ground\", \"claw\", \"cross\"]\n",
    "cdf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above dataframe is the capacitance matrix for our system in Farads. \n",
    "\n",
    "To get a more accurate result - consider a higher order solver and a finer mesh.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Eigenmodal Simulation\n",
    "\n",
    "### For a qubit-cavity system"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import useful packages\n",
    "import qiskit_metal as metal\n",
    "from qiskit_metal import designs, draw\n",
    "from qiskit_metal import MetalGUI, Dict, open_docs\n",
    "from qiskit_metal.toolbox_metal import math_and_overrides\n",
    "from qiskit_metal.qlibrary.core import QComponent\n",
    "from collections import OrderedDict\n",
    "from squadds.components.qubits import TransmonCross\n",
    "from qiskit_metal.qlibrary.tlines.meandered import RouteMeander\n",
    "from qiskit_metal.qlibrary.tlines.straight_path import RouteStraight\n",
    "from qiskit_metal.qlibrary.tlines.pathfinder import RoutePathfinder\n",
    "from qiskit_metal.qlibrary.terminations.launchpad_wb import LaunchpadWirebond\n",
    "from qiskit_metal.qlibrary.terminations.open_to_ground import OpenToGround\n",
    "from qiskit_metal.qlibrary.terminations.short_to_ground import ShortToGround\n",
    "from qiskit_metal.qlibrary.couplers.coupled_line_tee import CoupledLineTee\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this example lets use an example geometry from [Tutorial 5](https://lfl-lab.github.io/SQuADDS/source/tutorials/Tutorial-5_Designing_a_fab_ready_chip_with_SQuADDS.html#Making-the-Design) and build the design with `SQDMetal`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "347d5845c7994da38686d9a915142e49",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating train split: 0 examples [00:00, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "db.unselect_all()\n",
    "db.select_system([\"cavity_claw\", \"qubit\"])\n",
    "db.select_qubit(\"TransmonCross\")\n",
    "db.select_cavity_claw(\"RouteMeander\")\n",
    "db.select_resonator_type(\"quarter\")\n",
    "df = db.create_system_df()\n",
    "\n",
    "analyzer.reload_db()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time taken to add the coupled H params: 4.395071029663086 seconds\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_qc</th>\n",
       "      <th>PI_qubit</th>\n",
       "      <th>date_created_qubit</th>\n",
       "      <th>group_qubit</th>\n",
       "      <th>institution_qubit</th>\n",
       "      <th>uploader_qubit</th>\n",
       "      <th>design_options_qubit</th>\n",
       "      <th>design_tool_qubit</th>\n",
       "      <th>renderer_options_qubit</th>\n",
       "      <th>setup_qubit</th>\n",
       "      <th>...</th>\n",
       "      <th>simulator_cavity_claw</th>\n",
       "      <th>cavity_frequency_GHz</th>\n",
       "      <th>kappa_kHz</th>\n",
       "      <th>units_cavity_claw</th>\n",
       "      <th>design_options</th>\n",
       "      <th>EC</th>\n",
       "      <th>EJ</th>\n",
       "      <th>qubit_frequency_GHz</th>\n",
       "      <th>anharmonicity_MHz</th>\n",
       "      <th>g_MHz</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12514</th>\n",
       "      <td>1900</td>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142549</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'auto_increase_solution_order': True, 'enable...</td>\n",
       "      <td>...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "      <td>7.205627</td>\n",
       "      <td>405.807603</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'cavity_claw_options': {'coupler_type': 'CLT'...</td>\n",
       "      <td>0.180488</td>\n",
       "      <td>10.278024</td>\n",
       "      <td>3.66213</td>\n",
       "      <td>-205.109839</td>\n",
       "      <td>98.903433</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       index_qc                PI_qubit date_created_qubit group_qubit  \\\n",
       "12514      1900  Eli Levenson-Falk, PhD  2023-09-20-142549         LFL   \n",
       "\n",
       "      institution_qubit uploader_qubit  \\\n",
       "12514               USC      Andre Kuo   \n",
       "\n",
       "                                    design_options_qubit design_tool_qubit  \\\n",
       "12514  {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...      qiskit-metal   \n",
       "\n",
       "                                  renderer_options_qubit  \\\n",
       "12514  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "\n",
       "                                             setup_qubit  ...  \\\n",
       "12514  {'auto_increase_solution_order': True, 'enable...  ...   \n",
       "\n",
       "      simulator_cavity_claw  cavity_frequency_GHz   kappa_kHz  \\\n",
       "12514            Ansys HFSS              7.205627  405.807603   \n",
       "\n",
       "       units_cavity_claw                                     design_options  \\\n",
       "12514                 Hz  {'cavity_claw_options': {'coupler_type': 'CLT'...   \n",
       "\n",
       "             EC         EJ qubit_frequency_GHz anharmonicity_MHz      g_MHz  \n",
       "12514  0.180488  10.278024             3.66213       -205.109839  98.903433  \n",
       "\n",
       "[1 rows x 41 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "target_params = {\n",
    "                \"qubit_frequency_GHz\": 3.7,\n",
    "                \"resonator_type\":\"quarter\",\n",
    "                \"anharmonicity_MHz\": -210,\n",
    "                \"g_MHz\": 100 # should provide a big punchout shift\n",
    "                }\n",
    "\n",
    "# computing the cavity frequency desired as per the design requirements\n",
    "target_params[\"cavity_frequency_GHz\"] = 2*(target_params[\"qubit_frequency_GHz\"]+target_params[\"anharmonicity_MHz\"]/1000)\n",
    "\n",
    "results = analyzer.find_closest(target_params=target_params,num_top=1,metric=\"Euclidean\")\n",
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_qubit = analyzer.get_qubit_options(results)\n",
    "data_cpw = analyzer.get_cpw_options(results)\n",
    "data_coupler = analyzer.get_coupler_options(results)\n",
    "LJs = analyzer.get_Ljs(results) # in nH"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating a new `design` and `gui` object since we are running this in the same notebook. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First delete components \n",
    "design.delete_all_components()  \n",
    "  \n",
    "# Close the GUI  \n",
    "gui.main_window.close()  \n",
    "  \n",
    "# Forced garbage collection  \n",
    "gui = None  \n",
    "design = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "10:33AM 39s CRITICAL [_qt_message_handler]: line: 0, func: None(), file: None  CRITICAL: <QNSWindow: 0x7fd1906dec70; contentView=<QNSView: 0x7fd1e79fd300; QCocoaWindow(0x7fd19321ea70, window=QWidgetWindow(0x7fd1a2ccf050, name=\"MainWindowPlotWindow\"))>> has active key-value observers (KVO)! These will stop working now that the window is recreated, and will result in exceptions when the observers are removed. Break in QCocoaWindow::recreateWindowIfNeeded to debug.\n",
      "\n",
      "10:33AM 39s CRITICAL [_qt_message_handler]: line: 0, func: None(), file: None  CRITICAL: <QNSWindow: 0x7fd1986f8510; contentView=<QNSView: 0x7fd1986f8260; QCocoaWindow(0x7fd1986f81b0, window=QWidgetWindow(0x7fd1a2cbd250, name=\"ElementsWindowWindow\"))>> has active key-value observers (KVO)! These will stop working now that the window is recreated, and will result in exceptions when the observers are removed. Break in QCocoaWindow::recreateWindowIfNeeded to debug.\n",
      "\n",
      "10:33AM 39s CRITICAL [_qt_message_handler]: line: 0, func: None(), file: None  CRITICAL: <QNSWindow: 0x7fd1b2d21000; contentView=<QNSView: 0x7fd1b2d20880; QCocoaWindow(0x7fd1b2d20770, window=QWidgetWindow(0x7fd1b2d20270, name=\"MainWindowWindow\"))>> has active key-value observers (KVO)! These will stop working now that the window is recreated, and will result in exceptions when the observers are removed. Break in QCocoaWindow::recreateWindowIfNeeded to debug.\n",
      "\n",
      "10:33AM 39s CRITICAL [_qt_message_handler]: line: 0, func: None(), file: None  CRITICAL: <QNSWindow: 0x7fd1875b02b0; contentView=<QNSView: 0x7fd1875afeb0; QCocoaWindow(0x7fd1914074f0, window=QWidgetWindow(0x7fd195c3dd80, name=\"NetListWindowWindow\"))>> has active key-value observers (KVO)! These will stop working now that the window is recreated, and will result in exceptions when the observers are removed. Break in QCocoaWindow::recreateWindowIfNeeded to debug.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "design = designs.DesignPlanar({}, overwrite_enabled=True)\n",
    "gui = MetalGUI(design)\n",
    "\n",
    "\n",
    "# Set up chip dimensions \n",
    "design.chips.main.size.size_x = '4.6mm'\n",
    "design.chips.main.size.size_y = '2.4mm'\n",
    "design.chips.main.size.size_z = '-280um'\n",
    "design.chips.main.size.center_x = '0mm'\n",
    "design.chips.main.size.center_y = '-1mm'\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets create the qubit with a junction and a claw\n",
    "\n",
    "#### Qubit (with a junction) and Claw\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "from SQDMetal.Comps.Xmon import Xmon\n",
    "from SQDMetal.Comps.Junctions import JunctionDolanPinStretch\n",
    "from SQDMetal.Comps.Capacitors import CapacitorProngPin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate vBar_gap and hBar_gap\n",
    "def extract_um(value: str) -> float:\n",
    "    \"\"\"Extract float from '30um'.\"\"\"\n",
    "    return float(value.replace('um', ''))\n",
    "\n",
    "# Unpack parameters from data_qubit\n",
    "cross_width = extract_um(data_qubit['cross_width'][0])  \n",
    "cross_length = extract_um(data_qubit['cross_length'][0])  \n",
    "cross_gap = extract_um(data_qubit['cross_gap'][0])  \n",
    "\n",
    "# Now create the Xmon\n",
    "xmon = Xmon(\n",
    "    design,\n",
    "    'xmon',\n",
    "    options=Dict(\n",
    "        pos_x = '0.375mm',\n",
    "        pos_y = '-1.3',\n",
    "        hBar_width = f\"{cross_width}um\",\n",
    "        vBar_width = f\"{cross_width}um\",\n",
    "        vBar_gap = f\"{cross_gap}um\",\n",
    "        hBar_gap = f\"{cross_gap}um\",\n",
    "        cross_width = f\"{2*cross_length}um\",\n",
    "        cross_height = f\"{2*cross_length}um\",\n",
    "        gap_up = data_qubit['cross_gap'][0],\n",
    "        gap_left = data_qubit['cross_gap'][0],\n",
    "        gap_right = data_qubit['cross_gap'][0],\n",
    "        gap_down = data_qubit['cross_gap'][0]\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Claw\n",
    "prong_length = extract_um(data_qubit['claw_length'][0]) - extract_um(data_qubit['claw_width'][0])\n",
    "pin_gap_side = extract_um(data_qubit['claw_gap'][0])+extract_um(data_qubit['cross_gap'][0])+extract_um(data_qubit['ground_spacing'][0])\n",
    "\n",
    "claw = CapacitorProngPin(\n",
    "    design,\n",
    "    'claw',\n",
    "    options=Dict(\n",
    "        pin_inputs=Dict(start_pin=Dict(component='xmon', pin='up')),\n",
    "        prong_width = data_qubit['claw_width'][0],\n",
    "        pad_thickness = data_qubit['claw_width'][0],\n",
    "        gap_front = data_qubit['cross_gap'][0],\n",
    "        gap_back = data_qubit['claw_gap'][0],\n",
    "        gap_side = data_qubit['claw_gap'][0],\n",
    "        prong_length = f\"{prong_length}um\",\n",
    "        pin_gap_side = f\"{pin_gap_side}um\"\n",
    "    )\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Junction\n",
    "junction = JunctionDolanPinStretch(design, 'junction', options=Dict(pin_inputs=Dict(start_pin=Dict(component=f'xmon',pin='right')),\n",
    "                                                         dist_extend=data_qubit['cross_gap'][0],\n",
    "                                                         layer=2,\n",
    "                                                         finger_width='0.4um', t_pad_size='0.385um',\n",
    "                                                         squid_width='5.4um', prong_width='0.9um'))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Resonator and Feedline\n",
    "\n",
    "Now lets add the resonator and feedline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lauchpad 1\n",
    "x1 = '-2mm'\n",
    "y1 = '0mm'\n",
    "launch_options1 = dict(chip='main', pos_x=x1, pos_y=y1, orientation='360', lead_length='30um', pad_height='103um', \n",
    "                      pad_width='103um', pad_gap='60um', trace_width = data_cpw[\"trace_width\"], trace_gap = data_cpw[\"trace_gap\"])\n",
    "LP1 = LaunchpadWirebond(design, 'LP1', options = launch_options1)\n",
    "\n",
    "# Launchpad 2\n",
    "x2 = '2mm'\n",
    "y1 = '0mm'\n",
    "launch_options2 = dict(chip='main', pos_x=x2, pos_y=y1, orientation='180', lead_length='30um', pad_height='103um', \n",
    "                      pad_width='103um', pad_gap='60um', trace_width = data_cpw[\"trace_width\"], trace_gap = data_cpw[\"trace_gap\"])\n",
    "LP2 = LaunchpadWirebond(design, 'LP2', options = launch_options2)\n",
    "\n",
    "# Using path finder to connect the two launchpads\n",
    "feedline = RoutePathfinder(design, 'feedline', options = dict(chip='main', trace_width = data_cpw[\"trace_width\"],\n",
    "                                            trace_gap = data_cpw[\"trace_gap\"],\n",
    "                                            fillet='90um',                                                            \n",
    "                                            hfss_wire_bonds = True,\n",
    "                                            lead=dict(end_straight='0.1mm'),\n",
    "                                            pin_inputs=Dict(\n",
    "                                                start_pin=Dict(\n",
    "                                                    component='LP1',\n",
    "                                                    pin='tie'),\n",
    "                                                end_pin=Dict(\n",
    "                                                    component='LP2',\n",
    "                                                    pin='tie')\n",
    "                                            )))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#open to ground for resonator\n",
    "otg1 = OpenToGround(design, 'otg1', options=dict(chip='main', pos_x='-0.2mm',  pos_y='-40um', orientation = 180))\n",
    "\n",
    "\n",
    "# Resonator and feedline gap width (W) and center conductor width (S) \n",
    "design.variables['cpw_width'] = data_cpw[\"trace_width\"] \n",
    "design.variables['cpw_gap'] = data_cpw[\"trace_gap\"] \n",
    "\n",
    "# Use RouteMeander to fix the total length of the resonator\n",
    "res1 = RouteMeander(design, 'resonator',  Dict(\n",
    "        trace_width ='10um',\n",
    "        trace_gap ='6um',\n",
    "        total_length='3.7mm',\n",
    "        hfss_wire_bonds = False,\n",
    "        fillet='99.9 um',\n",
    "        lead = dict(start_straight='300um'),\n",
    "        pin_inputs=Dict(\n",
    "        start_pin=Dict(component= 'otg1', pin= 'open'),\n",
    "        end_pin=Dict(component= 'claw', pin= 'a')), ))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check the design"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {
      "image/png": {
       "width": 500
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# rebuild the GUI\n",
    "design.rebuild()\n",
    "gui.rebuild()\n",
    "gui.autoscale()\n",
    "gui.screenshot('sims/qubit-cavity.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define the hyper-parameters for the eigenmode simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "from SQDMetal.PALACE.Eigenmode_Simulation import PALACE_Eigenmode_Simulation\n",
    "\n",
    "#Eigenmode Simulation Options\n",
    "user_defined_options = {\n",
    "                 \"mesh_refinement\":  0,                             #refines mesh in PALACE - essetially divides every mesh element in half\n",
    "                 \"dielectric_material\": \"silicon\",                  #choose dielectric material - 'silicon' or 'sapphire'\n",
    "                 \"starting_freq\": 2e9,                              #starting frequency in Hz \n",
    "                 \"number_of_freqs\": 6,                              #number of eigenmodes to find\n",
    "                 \"solns_to_save\": 6,                                #number of electromagnetic field visualizations to save\n",
    "                 \"solver_order\": 1,                                 #increasing solver order increases accuracy of simulation, but significantly increases sim time\n",
    "                 \"solver_tol\": 1.0e-3,                              #error residual tolerance foriterative solver\n",
    "                 \"solver_maxits\": 3,                              #number of solver iterations\n",
    "                 \"mesh_max\": 120e-3,                                #maxiumum element size for the mesh in mm\n",
    "                 \"mesh_min\": 10e-3,                                 #minimum element size for the mesh in mm\n",
    "                 \"mesh_sampling\": 130,                              #number of points to mesh along a geometry\n",
    "                 \"fillet_resolution\":12,   \n",
    "                 \"num_cpus\": 10,                                      #number of CPU cores to use for simulation\n",
    "                 \"palace_dir\":path_to_palace\n",
    "                }\n",
    "\n",
    "#Creat the Palace Eigenmode simulation\n",
    "eigen_sim = PALACE_Eigenmode_Simulation(name ='qubit-cavity-eig',                              #name of simulation\n",
    "                                        metal_design = design,                                      #feed in qiskit metal design\n",
    "                                        sim_parent_directory = \"sims/\",            #choose directory where mesh file, config file and HPC batch file will be saved\n",
    "                                        mode = 'simPC',                                               #choose simulation mode 'HPC' or 'simPC'                                          \n",
    "                                        meshing = 'GMSH',                                         #choose meshing 'GMSH' or 'COMSOL'\n",
    "                                        user_options = user_defined_options,                        #provide options chosen above\n",
    "                                        view_design_gmsh_gui = False,                               #view design in GMSH gui \n",
    "                                        create_files = True)                                        #create mesh, config and HPC batch files\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Assigning the materials to the interfaces, add ports to the design, and add some mesh."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from SQDMetal.Utilities.Materials import MaterialInterface\n",
    "\n",
    "eigen_sim.add_metallic(1, threshold=1e-10, fuse_threshold=1e-10)\n",
    "eigen_sim.add_ground_plane(threshold=1e-10)\n",
    "\n",
    "#Fine-mesh the transmon cross qubit region\n",
    "eigen_sim.fine_mesh_in_rectangle(0.2875e-3, -1.2e-3, 0.63e-3, -1.72e-3, min_size=15e-6, max_size=120e-6)\n",
    "\n",
    "#Add in the RF ports\n",
    "eigen_sim.create_port_CPW_on_Launcher('LP1', 20e-6)\n",
    "eigen_sim.create_port_CPW_on_Launcher('LP2', 20e-6)\n",
    "eigen_sim.create_port_JosephsonJunction('junction', L_J=LJs[0]*1e-9, C_J=10e-15) # Guessing the C_J value really\n",
    "\n",
    "# #Fine-mesh routed paths\n",
    "eigen_sim.fine_mesh_around_comp_boundaries(['feedline', 'resonator'], min_size=25e-6, max_size=250e-6)\n",
    "eigen_sim.fine_mesh_around_comp_boundaries(['xmon'], min_size=14e-6, max_size=75e-6)\n",
    "\n",
    "eigen_sim.setup_EPR_interfaces(metal_air=MaterialInterface('Aluminium-Vacuum'), substrate_air=MaterialInterface('Silicon-Vacuum'), substrate_metal=MaterialInterface('Silicon-Aluminium'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "eigen_sim.prepare_simulation()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Checking the meshfile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gmsh_nav = GMSH_Navigator(eigen_sim.path_mesh)\n",
    "gmsh_nav.open_GUI()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If all looks good, lets run the simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">> /opt/homebrew/bin/mpirun -n 10 /Users/shanto/LFL/palace/build/bin/palace-arm64.bin qubit-cavity-eig.json\n",
      "\n",
      "_____________     _______\n",
      "_____   __   \\____ __   /____ ____________\n",
      "____   /_/  /  __ ` /  /  __ ` /  ___/  _ \\\n",
      "___   _____/  /_/  /  /  /_/  /  /__/  ___/\n",
      "  /__/     \\___,__/__/\\___,__/\\_____\\_____/\n",
      "\n",
      "Git changeset ID: v0.13.0-117-g748660c\n",
      "Running with 10 MPI processes\n",
      "Device configuration: cpu\n",
      "Memory configuration: host-std\n",
      "libCEED backend: /cpu/self/xsmm/blocked\n",
      "\n",
      "Added 2574 elements in 2 iterations of local bisection for under-resolved interior boundaries\n",
      "Added 5333 duplicate vertices for interior boundaries in the mesh\n",
      "Added 12701 duplicate boundary elements for interior boundaries in the mesh\n",
      "Added 1550 boundary elements for material interfaces to the mesh\n",
      "Finished partitioning mesh into 10 subdomains\n",
      "\n",
      "Characteristic length and time scales:\n",
      " L₀ = 5.520e-03 m, t₀ = 1.841e-02 ns\n",
      "\n",
      "Mesh curvature order: 1\n",
      "Mesh bounding box:\n",
      " (Xmin, Ymin, Zmin) = (-2.760e-03, -2.440e-03, -2.800e-04) m\n",
      " (Xmax, Ymax, Zmax) = (+2.760e-03, +4.400e-04, +2.800e-04) m\n",
      "\n",
      "Parallel Mesh Stats:\n",
      "\n",
      "                minimum     average     maximum       total\n",
      " vertices          2786        3522        3859       35223\n",
      " edges            18749       20919       22124      209195\n",
      " faces            31110       32653       33699      326538\n",
      " elements         15011       15256       15457      152568\n",
      " neighbors            2           4           5\n",
      "\n",
      "            minimum     maximum\n",
      " h      0.000513927   0.0271869\n",
      " kappa      1.01967     157.435\n",
      "\n",
      "Configuring Robin absorbing BC (order 1) at attributes:\n",
      " 13\n",
      "\n",
      "Configuring Robin impedance BC for lumped ports at attributes:\n",
      " 5: Rs = 6.667e+01 Ω/sq, n = (+0.0, +0.0, +1.0)\n",
      " 6: Rs = 6.667e+01 Ω/sq, n = (+0.0, +0.0, -1.0)\n",
      " 7: Rs = 6.667e+01 Ω/sq, n = (-0.0, +0.0, +1.0)\n",
      " 8: Rs = 6.667e+01 Ω/sq, n = (+0.0, +0.0, -1.0)\n",
      " 9: Ls = 5.725e-09 H/sq, Cs = 2.778e-14 F/sq, n = (+0.0, +0.0, +1.0)\n",
      "\n",
      "Configuring lumped port circuit properties:\n",
      " Index = 1: R = 5.000e+01 Ω\n",
      " Index = 2: R = 5.000e+01 Ω\n",
      " Index = 3: L = 1.590e-08 H, C = 1.000e-14 F\n",
      "\n",
      "Configuring lumped port excitation source term at attributes:\n",
      " 5: Index = 1\n",
      " 6: Index = 1\n",
      "\n",
      "Configuring Dirichlet PEC BC at attributes:\n",
      " 1-4\n",
      "\n",
      "Assembling system matrices, number of global unknowns:\n",
      " H1 (p = 1): 35223, ND (p = 1): 209195, RT (p = 1): 326538\n",
      " Operator assembly level: Partial\n",
      " Mesh geometries:\n",
      "  Tetrahedron: P = 6, Q = 4 (quadrature order = 2)\n",
      "\n",
      "Configuring SLEPc eigenvalue solver:\n",
      " Scaling γ = 4.711e+02, δ = 1.089e-05\n",
      " Configuring divergence-free projection\n",
      " Using random starting vector\n",
      " Shift-and-invert σ = 2.000e+00 GHz (2.314e-01)\n",
      "\n",
      "Assembling multigrid hierarchy:\n",
      " Level 0 (p = 1): 209195 unknowns, 3111237 NNZ\n",
      " Level 0 (auxiliary) (p = 1): 35223 unknowns, 467972 NNZ\n",
      "\n",
      "#PETSc Option Table entries:\n",
      "-eps_monitor # (source: code)\n",
      "#End of PETSc Option Table entries\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 1.430279e+03\n",
      "1 (restart 0) KSP residual norm 1.025289e-01\n",
      "FGMRES solver converged in 1 iteration (avg. reduction factor: 7.168e-05)\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 3.363427e+02\n",
      "1 (restart 0) KSP residual norm 4.284830e-01\n",
      "2 (restart 0) KSP residual norm 5.323492e-02\n",
      "FGMRES solver converged in 2 iterations (avg. reduction factor: 1.258e-02)\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 4.995177e+01\n",
      "1 (restart 0) KSP residual norm 2.962309e-01\n",
      "2 (restart 0) KSP residual norm 1.384106e-01\n",
      "3 (restart 0) KSP residual norm 4.256018e-03\n",
      "FGMRES solver converged in 3 iterations (avg. reduction factor: 4.400e-02)\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 2.399569e+02\n",
      "1 (restart 0) KSP residual norm 1.230768e+00\n",
      "2 (restart 0) KSP residual norm 5.933160e-01\n",
      "3 (restart 0) KSP residual norm 2.217576e-02\n",
      "FGMRES solver converged in 3 iterations (avg. reduction factor: 4.521e-02)\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 1.244339e+02\n",
      "1 (restart 0) KSP residual norm 1.137913e+00\n",
      "2 (restart 0) KSP residual norm 3.299754e-01\n",
      "3 (restart 0) KSP residual norm 1.271091e-02\n",
      "FGMRES solver converged in 3 iterations (avg. reduction factor: 4.675e-02)\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 2.330694e+02\n",
      "1 (restart 0) KSP residual norm 6.423500e+00\n",
      "2 (restart 0) KSP residual norm 2.903788e+00\n",
      "3 (restart 0) KSP residual norm 5.072627e-02\n",
      "FGMRES solver converged in 3 iterations (avg. reduction factor: 6.015e-02)\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 1.177260e+02\n",
      "1 (restart 0) KSP residual norm 1.965855e+01\n",
      "2 (restart 0) KSP residual norm 1.019226e+01\n",
      "3 (restart 0) KSP residual norm 4.281215e-02\n",
      "FGMRES solver converged in 3 iterations (avg. reduction factor: 7.138e-02)\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 7.166516e+01\n",
      "1 (restart 0) KSP residual norm 1.882151e+01\n",
      "2 (restart 0) KSP residual norm 8.034346e+00\n",
      "3 (restart 1) KSP residual norm 8.581616e-02\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.062e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 1.197e-03 (norm(b) = 7.167e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 4.438828e+01\n",
      "1 (restart 0) KSP residual norm 3.915629e+01\n",
      "2 (restart 0) KSP residual norm 2.771825e+01\n",
      "3 (restart 1) KSP residual norm 1.376060e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.458e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 3.100e-03 (norm(b) = 4.439e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 1.881353e+01\n",
      "1 (restart 0) KSP residual norm 1.794439e+01\n",
      "2 (restart 0) KSP residual norm 1.621458e+01\n",
      "3 (restart 1) KSP residual norm 2.216238e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 2.275e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 1.178e-02 (norm(b) = 1.881e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 7.437849e+01\n",
      "1 (restart 0) KSP residual norm 4.763870e+01\n",
      "2 (restart 0) KSP residual norm 2.423142e+01\n",
      "3 (restart 1) KSP residual norm 1.437091e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.246e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 1.932e-03 (norm(b) = 7.438e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 3.741477e+01\n",
      "1 (restart 0) KSP residual norm 1.922261e+01\n",
      "2 (restart 0) KSP residual norm 1.103699e+01\n",
      "3 (restart 1) KSP residual norm 1.051296e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.411e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 2.810e-03 (norm(b) = 3.741e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 5.816988e+01\n",
      "1 (restart 0) KSP residual norm 1.515933e+01\n",
      "2 (restart 0) KSP residual norm 4.254469e+00\n",
      "3 (restart 1) KSP residual norm 1.630771e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.410e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 2.803e-03 (norm(b) = 5.817e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 9.802765e+01\n",
      "1 (restart 0) KSP residual norm 1.492574e+01\n",
      "2 (restart 0) KSP residual norm 3.576853e+00\n",
      "3 (restart 1) KSP residual norm 2.360518e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.340e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 2.408e-03 (norm(b) = 9.803e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 7.515375e+01\n",
      "1 (restart 0) KSP residual norm 2.017879e+01\n",
      "2 (restart 0) KSP residual norm 1.033416e+01\n",
      "3 (restart 1) KSP residual norm 2.479146e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.489e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 3.299e-03 (norm(b) = 7.515e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 2.893356e+01\n",
      "1 (restart 0) KSP residual norm 1.684602e+01\n",
      "2 (restart 0) KSP residual norm 6.739738e+00\n",
      "3 (restart 1) KSP residual norm 3.242989e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 2.238e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 1.121e-02 (norm(b) = 2.893e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 6.275299e+01\n",
      "1 (restart 0) KSP residual norm 3.481007e+01\n",
      "2 (restart 0) KSP residual norm 8.956085e+00\n",
      "3 (restart 1) KSP residual norm 2.241883e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.529e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 3.573e-03 (norm(b) = 6.275e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 9.813474e+01\n",
      "1 (restart 0) KSP residual norm 5.771641e+01\n",
      "2 (restart 0) KSP residual norm 2.303058e+01\n",
      "3 (restart 1) KSP residual norm 3.287270e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.496e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 3.350e-03 (norm(b) = 9.813e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 7.720219e+01\n",
      "1 (restart 0) KSP residual norm 6.971622e+01\n",
      "2 (restart 0) KSP residual norm 5.686884e+01\n",
      "3 (restart 1) KSP residual norm 6.714659e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 2.057e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 8.697e-03 (norm(b) = 7.720e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 7.638966e+01\n",
      "1 (restart 0) KSP residual norm 5.367837e+01\n",
      "2 (restart 0) KSP residual norm 3.439382e+01\n",
      "3 (restart 1) KSP residual norm 4.234735e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.770e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 5.544e-03 (norm(b) = 7.639e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 4.046626e+01\n",
      "1 (restart 0) KSP residual norm 3.725042e+01\n",
      "2 (restart 0) KSP residual norm 2.932071e+01\n",
      "3 (restart 1) KSP residual norm 5.039698e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 2.318e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 1.245e-02 (norm(b) = 4.047e+01)!\n",
      "\n",
      "  Eigenvalue approximations and residual norms for  solve.\n",
      "  1 EPS nconv=3 first unconverged value (error) -5.99792e-05+0.00236959i (7.88436159e-03)\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 9.338377e+01\n",
      "1 (restart 0) KSP residual norm 6.841577e+01\n",
      "2 (restart 0) KSP residual norm 1.551008e+01\n",
      "3 (restart 1) KSP residual norm 3.357955e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.532e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 3.596e-03 (norm(b) = 9.338e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 3.848852e+01\n",
      "1 (restart 0) KSP residual norm 3.529388e+01\n",
      "2 (restart 0) KSP residual norm 1.276564e+01\n",
      "3 (restart 1) KSP residual norm 4.107574e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 2.202e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 1.067e-02 (norm(b) = 3.849e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 2.146012e+01\n",
      "1 (restart 0) KSP residual norm 1.794013e+01\n",
      "2 (restart 0) KSP residual norm 3.549434e+00\n",
      "3 (restart 1) KSP residual norm 3.490902e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 2.534e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 1.627e-02 (norm(b) = 2.146e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 2.626435e+01\n",
      "1 (restart 0) KSP residual norm 1.620009e+01\n",
      "2 (restart 0) KSP residual norm 9.740339e+00\n",
      "3 (restart 1) KSP residual norm 2.572754e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 2.140e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 9.796e-03 (norm(b) = 2.626e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 6.053078e+01\n",
      "1 (restart 0) KSP residual norm 3.772983e+01\n",
      "2 (restart 0) KSP residual norm 9.381913e+00\n",
      "3 (restart 1) KSP residual norm 3.134878e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.730e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 5.179e-03 (norm(b) = 6.053e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 3.068654e+01\n",
      "1 (restart 0) KSP residual norm 2.227387e+01\n",
      "2 (restart 0) KSP residual norm 1.148177e+01\n",
      "3 (restart 1) KSP residual norm 3.263594e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 2.199e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 1.064e-02 (norm(b) = 3.069e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 4.000095e+01\n",
      "1 (restart 0) KSP residual norm 3.774962e+01\n",
      "2 (restart 0) KSP residual norm 3.236872e+01\n",
      "3 (restart 1) KSP residual norm 4.540194e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 2.247e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 1.135e-02 (norm(b) = 4.000e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 5.487614e+01\n",
      "1 (restart 0) KSP residual norm 1.479330e+01\n",
      "2 (restart 0) KSP residual norm 3.903809e+00\n",
      "3 (restart 1) KSP residual norm 3.849042e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.914e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 7.014e-03 (norm(b) = 5.488e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 2.998138e+01\n",
      "1 (restart 0) KSP residual norm 2.593417e+01\n",
      "2 (restart 0) KSP residual norm 1.755319e+01\n",
      "3 (restart 1) KSP residual norm 2.091025e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.911e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 6.974e-03 (norm(b) = 2.998e+01)!\n",
      "\n",
      "  2 EPS nconv=3 first unconverged value (error) -6.48909e-06+0.00237218i (3.24932033e-03)\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 9.156055e+01\n",
      "1 (restart 0) KSP residual norm 7.561088e+01\n",
      "2 (restart 0) KSP residual norm 5.350887e+01\n",
      "3 (restart 1) KSP residual norm 3.359417e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.542e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 3.669e-03 (norm(b) = 9.156e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 4.328184e+01\n",
      "1 (restart 0) KSP residual norm 5.177230e+00\n",
      "2 (restart 0) KSP residual norm 2.643455e+00\n",
      "3 (restart 1) KSP residual norm 7.311708e-02\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.191e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 1.689e-03 (norm(b) = 4.328e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 2.654437e+01\n",
      "1 (restart 0) KSP residual norm 2.471066e+01\n",
      "2 (restart 0) KSP residual norm 1.929284e+01\n",
      "3 (restart 1) KSP residual norm 1.585790e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.815e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 5.974e-03 (norm(b) = 2.654e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 2.883990e+01\n",
      "1 (restart 0) KSP residual norm 2.513176e+01\n",
      "2 (restart 0) KSP residual norm 1.667884e+01\n",
      "3 (restart 1) KSP residual norm 1.766999e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.830e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 6.127e-03 (norm(b) = 2.884e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 2.436992e+01\n",
      "1 (restart 0) KSP residual norm 2.136366e+01\n",
      "2 (restart 0) KSP residual norm 1.101114e+01\n",
      "3 (restart 1) KSP residual norm 1.470419e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.821e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 6.034e-03 (norm(b) = 2.437e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 2.322963e+01\n",
      "1 (restart 0) KSP residual norm 1.508099e+01\n",
      "2 (restart 0) KSP residual norm 2.703346e+00\n",
      "3 (restart 1) KSP residual norm 1.939701e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 2.029e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 8.350e-03 (norm(b) = 2.323e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 1.839139e+01\n",
      "1 (restart 0) KSP residual norm 1.748410e+01\n",
      "2 (restart 0) KSP residual norm 1.323147e+01\n",
      "3 (restart 1) KSP residual norm 1.401911e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.968e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 7.623e-03 (norm(b) = 1.839e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 3.768103e+01\n",
      "1 (restart 0) KSP residual norm 2.925097e+01\n",
      "2 (restart 0) KSP residual norm 1.883773e+01\n",
      "3 (restart 1) KSP residual norm 3.743838e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 2.150e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 9.936e-03 (norm(b) = 3.768e+01)!\n",
      "\n",
      "Residual norms for FGMRES solve\n",
      "0 (restart 0) KSP residual norm 6.222312e+01\n",
      "1 (restart 0) KSP residual norm 2.570532e+01\n",
      "2 (restart 0) KSP residual norm 1.158891e+01\n",
      "3 (restart 1) KSP residual norm 3.742717e-01\n",
      "FGMRES solver did NOT converge in 3 iterations (avg. reduction factor: 1.819e-01)\n",
      "\n",
      "\u001b[38;2;255;255;000m--> Warning!\u001b[0m\n",
      "Linear solver did not converge, norm(Ax-b)/norm(b) = 6.015e-03 (norm(b) = 6.222e+01)!\n",
      "\n",
      "  3 EPS nconv=6 first unconverged value (error) -5.03842e-05+0.00284045i (5.04197645e-03)\n",
      "\n",
      " Linear eigensolve converged (6 eigenpairs) due to CONVERGED_TOL; iterations 3\n",
      " Total number of linear systems solved: 39\n",
      " Total number of linear solver iterations: 114\n",
      " Found 6 converged eigenvalues (first = -1.642e-05+3.629e-01i)\n",
      "\n",
      "Computing solution error estimates and performing postprocessing\n",
      "\n",
      "m     Re{ω}/2π (GHz)     Im{ω}/2π (GHz)        Bkwd. Error         Abs. Error\n",
      "=============================================================================\n",
      "1      +3.136773e+00      +1.419088e-04      +7.453931e-09      +1.332296e-03\n",
      " Wrote mode 1 to disk\n",
      "2      +7.182393e+00      +5.380580e-02      +1.006762e-06      +1.799513e-01\n",
      " Wrote mode 2 to disk\n",
      "3      +7.984743e+00      +6.055952e-02      +1.045468e-06      +1.868709e-01\n",
      " Wrote mode 3 to disk\n",
      "4      +9.637757e+00      +4.853284e-02      +1.024503e-06      +1.831259e-01\n",
      " Wrote mode 4 to disk\n",
      "5      +9.940092e+00      +7.945941e-02      +1.765754e-06      +3.156225e-01\n",
      " Wrote mode 5 to disk\n",
      "6      +1.069663e+01      +2.472282e-01      +8.803625e-07      +1.573627e-01\n",
      " Wrote mode 6 to disk\n",
      "\n",
      "Completed 0 iterations of adaptive mesh refinement (AMR):\n",
      " Indicator norm = 4.003e-01, global unknowns = 209195\n",
      " Max. iterations = 0, tol. = 1.000e-02\n",
      "\n",
      "Elapsed Time Report (s)           Min.        Max.        Avg.\n",
      "==============================================================\n",
      "Initialization                   3.161       3.178       3.170\n",
      "Operator Construction            2.799       2.818       2.808\n",
      "Linear Solve                     5.299       5.393       5.334\n",
      "  Setup                          0.103       0.104       0.103\n",
      "  Preconditioner                16.477      16.502      16.487\n",
      "Eigenvalue Solve                 3.076       3.291       3.192\n",
      "Div.-Free Projection            10.319      10.464      10.396\n",
      "Estimation                       0.168       0.224       0.195\n",
      "  Construction                   3.004       3.010       3.006\n",
      "  Solve                         14.826      14.867      14.848\n",
      "Postprocessing                   1.515       1.558       1.535\n",
      "Disk IO                          9.005       9.029       9.012\n",
      "--------------------------------------------------------------\n",
      "Total                           70.149      70.177      70.167\n",
      "\n",
      "Error in plotting: 'Data array (E_real) not present in this dataset.'\n"
     ]
    }
   ],
   "source": [
    "eigen_sim.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reading the eigenmode data now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>m</th>\n",
       "      <th>Re{f} (GHz)</th>\n",
       "      <th>Im{f} (GHz)</th>\n",
       "      <th>Q</th>\n",
       "      <th>Error (Bkwd.)</th>\n",
       "      <th>Error (Abs.)</th>\n",
       "      <th>kappa (kHz)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3.136773</td>\n",
       "      <td>0.000142</td>\n",
       "      <td>11052.078970</td>\n",
       "      <td>7.453931e-09</td>\n",
       "      <td>0.001332</td>\n",
       "      <td>283.817506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>7.182393</td>\n",
       "      <td>0.053806</td>\n",
       "      <td>66.745540</td>\n",
       "      <td>1.006762e-06</td>\n",
       "      <td>0.179951</td>\n",
       "      <td>107608.576252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>7.984743</td>\n",
       "      <td>0.060560</td>\n",
       "      <td>65.926648</td>\n",
       "      <td>1.045468e-06</td>\n",
       "      <td>0.186871</td>\n",
       "      <td>121115.561217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>9.637757</td>\n",
       "      <td>0.048533</td>\n",
       "      <td>99.292352</td>\n",
       "      <td>1.024503e-06</td>\n",
       "      <td>0.183126</td>\n",
       "      <td>97064.445860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>9.940092</td>\n",
       "      <td>0.079459</td>\n",
       "      <td>62.550229</td>\n",
       "      <td>1.765754e-06</td>\n",
       "      <td>0.315622</td>\n",
       "      <td>158913.751172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6.0</td>\n",
       "      <td>10.696626</td>\n",
       "      <td>0.247228</td>\n",
       "      <td>21.638878</td>\n",
       "      <td>8.803625e-07</td>\n",
       "      <td>0.157363</td>\n",
       "      <td>494324.424365</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     m  Re{f} (GHz)  Im{f} (GHz)             Q  Error (Bkwd.)  Error (Abs.)  \\\n",
       "0  1.0     3.136773     0.000142  11052.078970   7.453931e-09      0.001332   \n",
       "1  2.0     7.182393     0.053806     66.745540   1.006762e-06      0.179951   \n",
       "2  3.0     7.984743     0.060560     65.926648   1.045468e-06      0.186871   \n",
       "3  4.0     9.637757     0.048533     99.292352   1.024503e-06      0.183126   \n",
       "4  5.0     9.940092     0.079459     62.550229   1.765754e-06      0.315622   \n",
       "5  6.0    10.696626     0.247228     21.638878   8.803625e-07      0.157363   \n",
       "\n",
       "     kappa (kHz)  \n",
       "0     283.817506  \n",
       "1  107608.576252  \n",
       "2  121115.561217  \n",
       "3   97064.445860  \n",
       "4  158913.751172  \n",
       "5  494324.424365  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def read_csv_to_dataframe(file_path):\n",
    "    return pd.read_csv(file_path)\n",
    "\n",
    "eigen_df = read_csv_to_dataframe(\"sims/qubit-cavity-eig/outputFiles/eig.csv\")\n",
    "eigen_df.columns = eigen_df.columns.str.strip()\n",
    "eigen_df[\"kappa (kHz)\"] = eigen_df[\"Re{f} (GHz)\"] / eigen_df[\"Q\"] * 1e6\n",
    "eigen_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From our requirements, we wanted a qubit frequency of 3.7 GHz and a cavity frequency of"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.98"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "target_params[\"cavity_frequency_GHz\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the simulations, it seems like mode 1 is the qubit mode (found to be 3.136 GHz) and mode 2 is the cavity mode (found to be 7.183 GHz) given their frequencies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets' visualize all the eigenmodes in `paraview` to see if thats the case. Here are some screenshots from this toy example.\n",
    "\n",
    "<table>\n",
    "    <tr>\n",
    "        <td><img src=\"qubit-mode1.png\" width=\"50%\" alt=\"Mode 2\"></td>\n",
    "        <td><img src=\"cavity-mode2.png\" width=\"50%\" alt=\"Mode 4\"></td>\n",
    "        <td><img src=\"cavity-mode3.png\" width=\"50%\" alt=\"Mode 4\"></td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "        <td>Mode 1: Qubit Mode</td>\n",
    "        <td>Mode 2: Cavity Mode?</td>\n",
    "        <td>Mode 3: Cavity Mode?</td>\n",
    "    </tr>\n",
    "</table>\n",
    "\n",
    "It seems like that indeed mode 1 is the qubit mode and mode 3 looks to be like the cavity mode (apologies for the bad quality of the images).\n",
    "\n",
    "**Of course, this simulation was done with really coarse hyperparameters (ran in 1.5 minutes on my 2021 Macbook Pro) so this results are somewhat promising!**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EPR Calculations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since `palace` does automatic postprocessing of energy-participation ratios (EPRs) for circuit quantization and interface or bulk participation ratios for predicting dielectric loss, we can use this to do some quantum analysis from the eigenmode simulation when lumped inductive elements (i.e. josephson junctions) exist in the simulated geometry.\n",
    "\n",
    "First, we need to retrieve the mode-port EPRs from the eigenmode simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "mode_dict = eigen_sim.retrieve_mode_port_EPR_from_file(eigen_sim._output_data_dir)\n",
    "\n",
    "#get particpation ratios and frequencies from the simulation\n",
    "participation_ratios = mode_dict['mat_mode_port']\n",
    "frequencies = mode_dict['eigenfrequencies']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have identified the qubit and cavity modes from the eigenmode simulation as mode 3 and mode 4 respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "qubit_idx = 0\n",
    "cavity_idx = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "linear_qubit_freq = eigen_df['Re{f} (GHz)'][qubit_idx]*1e9\n",
    "linear_res_freq = eigen_df['Re{f} (GHz)'][cavity_idx]*1e9\n",
    "P_qubit = abs(participation_ratios[qubit_idx, 0])\n",
    "P_cav = abs(participation_ratios[cavity_idx, 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.9902988796, 5.020978473e-05)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P_qubit, P_cav"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's calculate the qubit and cavity Hamiltonian parameters using these participation ratios."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Constants used for calculations\n",
    "from scipy.constants import Planck, e, hbar\n",
    "phi0 = hbar/(2*e)\n",
    "\n",
    "#Josephson Energy (Ej) and linear inductance (Lj)\n",
    "delta_super = (1.8e-4 / 2) * e\n",
    "Lj = LJs[0]*1e-9\n",
    "Ej = phi0**2 / Lj\n",
    "\n",
    "#Normalize Participation Ratios\n",
    "P_qubit_normalised = P_qubit / (P_qubit + P_cav)\n",
    "P_cav_normalised = P_cav / (P_qubit + P_cav)\n",
    "\n",
    "#Enter in Frequencies from Simulation\n",
    "omega_qubit = 2 * np.pi * linear_qubit_freq\n",
    "omega_res = 2 * np.pi * linear_res_freq\n",
    "\n",
    "#phi zero-point fluctuations for qubit\n",
    "phi_zpf_sq = P_qubit * hbar * 2 * omega_qubit  / (2*Ej)\n",
    "\n",
    "#anharmonicity qubit (self kerr)\n",
    "anharm_qubit = P_qubit**2 * hbar * omega_qubit**2 / (8*Ej)\n",
    "\n",
    "#anharmonicity resonator (self kerr)\n",
    "anharm_res = P_cav**2 * hbar * omega_res**2 / (8*Ej)\n",
    "\n",
    "#Charging Energy (Ec)\n",
    "Ec = anharm_qubit * hbar\n",
    "\n",
    "#Total Capacitance\n",
    "C_total = e**2 / (2*Ec)\n",
    "\n",
    "#cross kerr - dispersive shit (chi)\n",
    "cross_kerr = (P_qubit * P_cav * hbar * omega_qubit * omega_res) / (4*Ej)\n",
    "\n",
    "#lamb-shift of qubit frequency\n",
    "lamb_shift_qubit = anharm_qubit - cross_kerr/2\n",
    "\n",
    "#lamb-shift of res frequency\n",
    "lamb_shift_res = anharm_res - cross_kerr/2\n",
    "\n",
    "#detuning, delta\n",
    "delta = ((linear_res_freq - anharm_res/(2*np.pi)) - (linear_qubit_freq - anharm_qubit/(2*np.pi)))\n",
    "\n",
    "#resonator-qubit coupling strength (g)\n",
    "disp_shift_qubit = cross_kerr\n",
    "g_rwa = np.sqrt(disp_shift_qubit * delta  * (1 + delta/anharm_qubit))\n",
    "\n",
    "# coupling strength (g) from SQuADDS Paper\n",
    "Delta = omega_res - omega_qubit      # rad/s\n",
    "Sigma = omega_res + omega_qubit      # rad/s\n",
    "alpha = -anharm_qubit                # rad/s (already angular)\n",
    "chi = -disp_shift_qubit              # rad/s (already angular)\n",
    "# Denominator (s/rad)\n",
    "denom = (alpha / (Delta * (Delta - alpha))) - (alpha / (Sigma * (Sigma + alpha)))\n",
    "\n",
    "# Convert to linear frequency in MHz (optional, for reporting)\n",
    "g_rad = np.sqrt(chi / (2 * denom))     # rad/s\n",
    "g_MHz = g_rad / (2 * np.pi * 1e6)    # MHz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Interesting to check what `scqubits` says about the Hamiltonian parameters computed using the simulation results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:py.warnings:UserWarning: Changing units (by calling set_units()) after initializing qubit instances is likely to cause unintended inconsistencies.\n",
      " /opt/homebrew/Caskroom/mambaforge/base/envs/squadds_staging_env/lib/python3.10/site-packages/scqubits/core/units.py: 65\n"
     ]
    }
   ],
   "source": [
    "import scqubits as scq\n",
    "from scqubits.core.transmon import Transmon\n",
    "\n",
    "scq.set_units(\"GHz\")\n",
    "\n",
    "# Using scqubits to find the Josephson energy and charging energy using the qubit frequency and anharmonicity from EPR\n",
    "qubit_freq_GHz = linear_qubit_freq/1e9 - lamb_shift_qubit/(2*np.pi*1e9)\n",
    "qubit_anharm_GHz = (alpha*1e-9)/(2*np.pi)\n",
    "EJ_scq, EC_scq = Transmon.find_EJ_EC(qubit_freq_GHz, qubit_anharm_GHz)\n",
    "\n",
    "\n",
    "# Using scqubits to find the qubit frequency and anharmonicity now using the Josephson energy and charging energy from EP\n",
    "EJ_GHz = Ej / (hbar * 2 * np.pi *  1e9)\n",
    "EC_GHz = anharm_qubit  / (2*np.pi*1e9)\n",
    "transmon = Transmon(EJ=EJ_GHz, EC=EC_GHz, ng=0, ncut=30)\n",
    "qubit_freq_scq= transmon.E01()\n",
    "anharm_qubit_scq = transmon.anharmonicity() * 1E3  # MHz\n",
    "\n",
    "# Using scqubits to find the C_qubit capacitance\n",
    "\n",
    "def C_qubit_from_Ec(Ec):\n",
    "    \"\"\"\n",
    "    Calculate the capacitance (C_qubit) in fF from the charging energy (Ec) in GHz.\n",
    "    \"\"\"\n",
    "    Ec_Joules = Ec * 1e9 * Planck\n",
    "    Cs_SI = (e ** 2) / (2 * Ec_Joules)\n",
    "    Cs_fF = Cs_SI * 1e15\n",
    "    return Cs_fF\n",
    "\n",
    "C_qubit_scq = C_qubit_from_Ec(EC_scq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                              Parameter      Value     Unit\n",
      "                                     Ej  10.278024      GHz\n",
      "                          Ej (scqubits)  11.403408      GHz\n",
      "                                     Ec   0.117354      GHz\n",
      "                          Ec (scqubits)   0.107456      GHz\n",
      "                                  Ej/Ec  87.581095 unitless\n",
      "                       Ej/Ec (scqubits) 106.121806 unitless\n",
      "                                     Lj  15.903982       nH\n",
      "                                C_qubit 165.057588       fF\n",
      "                     C_qubit (scqubits) 180.262233       fF\n",
      "              C_qubit (from SQuADDS DB) 107.321280       fF\n",
      "              Participation Ratio Qubit   0.990299 unitless\n",
      " Participation Ratio Qubit (Normalized)   0.999949 unitless\n",
      "             Participation Ratio Cavity   0.000050 unitless\n",
      "Participation Ratio Cavity (Normalized)   0.000051 unitless\n",
      "                 Linear Qubit Frequency   3.136773      GHz\n",
      "                        Qubit Frequency   3.019434      GHz\n",
      "             Qubit Frequency (scqubits)   2.984043      GHz\n",
      "      Qubit Frequency (from SQuADDS DB)   3.662130      GHz\n",
      "                    Qubit Anharmonicity 117.354370      MHz\n",
      "         Qubit Anharmonicity (scqubits) 129.507341      MHz\n",
      "  Qubit Anharmonicity (from SQuADDS DB) 205.109839      MHz\n",
      "                Linear Cavity Frequency   7.984743      GHz\n",
      "                       Cavity Frequency   7.984758      GHz\n",
      "                   Cavity Anharmonicity   0.000002      MHz\n",
      "                 Dispersive Shift (chi)   0.030292      MHz\n",
      "Cavity-Qubit Coupling [Ref. SQuADDS], g  62.188858      MHz\n",
      "         Cavity-Qubit Coupling [RWA], g  13.606564      MHz\n",
      "                               Detuning   4.965324      GHz\n",
      "                       Flux_ZPF_squared   0.302232 unitless\n"
     ]
    }
   ],
   "source": [
    "hamiltonian_params = [\n",
    "    (\"Ej\", Ej / (hbar * 2 * np.pi *  1e9), \"GHz\"),\n",
    "    (\"Ej (scqubits)\", EJ_scq, \"GHz\"),\n",
    "    (\"Ec\", anharm_qubit  / (2*np.pi*1e9), \"GHz\"),\n",
    "    (\"Ec (scqubits)\", EC_scq, \"GHz\"),\n",
    "    (\"Ej/Ec\", Ej/Ec, \"unitless\"),\n",
    "    (\"Ej/Ec (scqubits)\", EJ_scq/EC_scq, \"unitless\"),\n",
    "    (\"Lj\", Lj/1e-9, \"nH\"),\n",
    "    (\"C_qubit\", C_total/1e-15, \"fF\"),\n",
    "    (\"C_qubit (scqubits)\", C_qubit_scq, \"fF\"),\n",
    "    (\"C_qubit (from SQuADDS DB)\", results[\"cross_to_claw\"].values[0]+results[\"cross_to_ground\"].values[0], \"fF\"),\n",
    "    (\"Participation Ratio Qubit\", P_qubit, \"unitless\"),\n",
    "    (\"Participation Ratio Qubit (Normalized)\", P_qubit_normalised, \"unitless\"),\n",
    "    (\"Participation Ratio Cavity\", P_cav, \"unitless\"),\n",
    "    (\"Participation Ratio Cavity (Normalized)\", P_cav_normalised, \"unitless\"),\n",
    "    (\"Linear Qubit Frequency\", linear_qubit_freq/1e9, \"GHz\"),\n",
    "    (\"Qubit Frequency\", linear_qubit_freq/1e9 - lamb_shift_qubit/(2*np.pi*1e9), \"GHz\"),\n",
    "    (\"Qubit Frequency (scqubits)\", qubit_freq_scq, \"GHz\"),\n",
    "    (\"Qubit Frequency (from SQuADDS DB)\", results[\"qubit_frequency_GHz\"].values[0], \"GHz\"),\n",
    "    (\"Qubit Anharmonicity\", anharm_qubit / (2*np.pi*1e6), \"MHz\"),\n",
    "    (\"Qubit Anharmonicity (scqubits)\", -anharm_qubit_scq, \"MHz\"),\n",
    "    (\"Qubit Anharmonicity (from SQuADDS DB)\", - results[\"anharmonicity_MHz\"].values[0], \"MHz\"),\n",
    "    (\"Linear Cavity Frequency\", linear_res_freq/1e9, \"GHz\"),\n",
    "    (\"Cavity Frequency\", linear_res_freq/1e9 - lamb_shift_res/(2*np.pi*1e9), \"GHz\"),\n",
    "    (\"Cavity Anharmonicity\", anharm_res / (2*np.pi*1e6), \"MHz\"),\n",
    "    (\"Dispersive Shift (chi)\", cross_kerr/ (2*np.pi*1e6), \"MHz\"),\n",
    "    (\"Cavity-Qubit Coupling [Ref. SQuADDS], g\", g_MHz, \"MHz\"),\n",
    "    (\"Cavity-Qubit Coupling [RWA], g\", g_rwa/(2*np.pi*1e6), \"MHz\"),\n",
    "    (\"Detuning\", delta/1e9, \"GHz\"),\n",
    "    (\"Flux_ZPF_squared\", phi_zpf_sq, \"unitless\"),\n",
    "]\n",
    "\n",
    "# Create DataFrame\n",
    "hamiltonian_df = pd.DataFrame(hamiltonian_params, columns=[\"Parameter\", \"Value\", \"Unit\"])\n",
    "\n",
    "# Function to format values\n",
    "def format_float_six_decimal(val, idx):\n",
    "    return f\"{val:.6f}\"\n",
    "\n",
    "# Apply formatting\n",
    "hamiltonian_df['Value'] = [\n",
    "    format_float_six_decimal(val, idx) for idx, val in enumerate(hamiltonian_df['Value'])\n",
    "]\n",
    "\n",
    "print(hamiltonian_df.to_string(index=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Work In Progress ⏳\n",
    "\n",
    "We are studying the hyper-parameters needed to converge our simulations to that of Ansys/experimentally verified results with `palace`. Once that is done, we will update this tutorial with a more comprehensive guide and native API"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## License\n",
    "\n",
    "<div style='width: 100%; background-color:#3cb1c2;color:#324344;padding-left: 10px; padding-bottom: 10px; padding-right: 10px; padding-top: 5px'>\n",
    "    <h3>This code is a part of SQuADDS</h3>\n",
    "    <p>Developed by Sadman Ahmed Shanto</p>\n",
    "    <p>This tutorial is written by Sadman Ahmed Shanto</p> \n",
    "    <p>&copy; Copyright Sadman Ahmed Shanto & Eli Levenson-Falk 2025.</p>\n",
    "    <p>This code is licensed under the MIT License. You may<br> obtain a copy of this license in the LICENSE.txt file in the root directory<br> of this source tree.</p>\n",
    "    <p>Any modifications or derivative works of this code must retain this<br>copyright notice, and modified files need to carry a notice indicating<br>that they have been altered from the originals.</p>\n",
    "</div>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "squadds_staging_env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
