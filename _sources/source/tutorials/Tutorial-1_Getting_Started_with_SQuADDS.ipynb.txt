{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial 1: Getting Started with SQuADDS\n",
    "\n",
    "In this tutorial, we will walk you through some basic usage of SQuADDS. By the end of this tutorial, you will be able to:\n",
    "\n",
    "- Have an HuggingFace account\n",
    "\n",
    "- Access the SQuADDS Database\n",
    "\n",
    "- Use the SQuADDS API to query for closest and \"best-guess\" interpolated device designs for your chosen Hamiltonian parameters\n",
    "\n",
    "- Simulate the \"best-guess\" design using an EM solver tool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip uninstall -y squadds\n",
    "!pip install -e ../."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "squadds                   0.2.33                    dev_0    <develop>\n"
     ]
    }
   ],
   "source": [
    "!conda list | grep squadds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since the SQuADDS Database is hosted on [HuggingFace](https://huggingface.co/), we will need to create an account and get an API key to access the database.\n",
    "\n",
    "## HuggingFace 🤗 \n",
    "\n",
    "HuggingFace is a company that provides a large number of NLP models and datasets. They also provide a platform to host your own models and datasets.\n",
    "\n",
    "### Creating an  Account\n",
    "\n",
    "Follow the instructions here - [HuggingFace: Sign Up](https://huggingface.co/join) - to create an account.\n",
    "\n",
    "Once you have created an account, you can get your API key from the [settings page](https://huggingface.co/settings/token).\n",
    "\n",
    "Please update the `HUGGINGFACE_API_KEY` variable in the `.env` file with your API key **OR** execute the following code to set the environment variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from squadds.core.utils import set_huggingface_api_key\n",
    "\n",
    "set_huggingface_api_key()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Login\n",
    "\n",
    "To login to your HuggingFace account, run the following command in your terminal:\n",
    "\n",
    "```bash\n",
    "huggingface-cli login\n",
    "```\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You will be prompted to enter your username and password. Once you have logged in, you can check your login status by running the following command:\n",
    "\n",
    "```bash\n",
    "huggingface-cli whoami\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Accessing the SQuADDS Database using the HuggingFace API\n",
    "\n",
    "The SQuADDS Database is hosted on HuggingFace. You can access the database using the `datasets` library from HuggingFace."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datasets import get_dataset_config_names\n",
    "from datasets import load_dataset\n",
    "\n",
    "configs = get_dataset_config_names(\"SQuADDS/SQuADDS_DB\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can navigate the database using HuggingFace API. For example, you can access the qubit database using the following code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "qubit_data = load_dataset(\"SQuADDS/SQuADDS_DB\", configs[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatasetDict({\n",
       "    train: Dataset({\n",
       "        features: ['sim_results', 'notes', 'design', 'sim_options', 'contributor'],\n",
       "        num_rows: 1934\n",
       "    })\n",
       "})"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qubit_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each configuration in the dataset is uniquely identified by their `config`. For the SQuADDS Database, the `config` string is created in the following format:\n",
    "\n",
    "```python\n",
    "config = f\"{component}_{component_name}_{data_type}\"\n",
    "```\n",
    "\n",
    "where `component` is the name of the component, `component_name` is the name of the component (in Qiskit Metal), and `data_type` is the type of simulation data that has been contributed.\n",
    "\n",
    "Lets check what the `config` string looks like for our database:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['qubit', 'cavity_claw', 'coupler']\n",
      "['TransmonCross', 'RouteMeander', 'NCap']\n",
      "['cap_matrix', 'eigenmode', 'cap_matrix']\n"
     ]
    }
   ],
   "source": [
    "components = []\n",
    "component_names = []\n",
    "data_types = []\n",
    "\n",
    "for config in configs:\n",
    "    components.append(config.split(\"-\")[0])\n",
    "    component_names.append(config.split(\"-\")[1])\n",
    "    data_types.append(config.split(\"-\")[2])\n",
    "    \n",
    "print(components)\n",
    "print(component_names)\n",
    "print(data_types)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using the SQuADDS API to access and anlyze the database\n",
    "\n",
    "While it is possible to directly access the SQuADDS Database using the `datasets` library, we have created a simple API to make it easier to query the database.\n",
    "\n",
    "The main object we use to access the database is the `SQuADDS_DB` class. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DotNet Core correctly loaded.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cc4d74d46d2d4de69ec7a27f5bdd1ad0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading readme:   0%|          | 0.00/2.25k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from squadds import SQuADDS_DB\n",
    "\n",
    "db = SQuADDS_DB()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can get a summary of the datasets by running."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╒═════════════╤══════════════════╤══════════════════╕\n",
      "│ Component   │ Component Name   │ Data Available   │\n",
      "╞═════════════╪══════════════════╪══════════════════╡\n",
      "│ qubit       │ TransmonCross    │ cap_matrix       │\n",
      "├─────────────┼──────────────────┼──────────────────┤\n",
      "│ cavity_claw │ RouteMeander     │ eigenmode        │\n",
      "├─────────────┼──────────────────┼──────────────────┤\n",
      "│ coupler     │ NCap             │ cap_matrix       │\n",
      "╘═════════════╧══════════════════╧══════════════════╛\n"
     ]
    }
   ],
   "source": [
    "db.view_datasets()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To check for the `config` names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['qubit-TransmonCross-cap_matrix',\n",
      " 'cavity_claw-RouteMeander-eigenmode',\n",
      " 'coupler-NCap-cap_matrix']\n"
     ]
    }
   ],
   "source": [
    "db.get_configs()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you are interested to learn more about each configuration, you can do so by using the `get_dataset_info` method.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b0be9bd5da024ab2beea5492cbc3714c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading data files:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "793787c47f554af8a473669cb3ef5c26",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting data files:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b2646eedb38f4fbfbda822008d161a1b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating train split: 0 examples [00:00, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================================================================\n",
      "Dataset Features:\n",
      "{'contributor': {'PI': Value(dtype='string', id=None),\n",
      "                 'date_created': Value(dtype='string', id=None),\n",
      "                 'group': Value(dtype='string', id=None),\n",
      "                 'institution': Value(dtype='string', id=None),\n",
      "                 'uploader': Value(dtype='string', id=None)},\n",
      " 'design': {'design_options': {...},\n",
      "            'design_tool': Value(dtype='string', id=None)},\n",
      " 'notes': {},\n",
      " 'sim_options': {'renderer_options': {...},\n",
      "                 'setup': {...},\n",
      "                 'simulator': Value(dtype='string', id=None)},\n",
      " 'sim_results': {'claw_to_claw': Value(dtype='float64', id=None),\n",
      "                 'claw_to_ground': Value(dtype='float64', id=None),\n",
      "                 'cross_to_claw': Value(dtype='float64', id=None),\n",
      "                 'cross_to_cross': Value(dtype='float64', id=None),\n",
      "                 'cross_to_ground': Value(dtype='float64', id=None),\n",
      "                 'ground_to_ground': Value(dtype='float64', id=None),\n",
      "                 'units': Value(dtype='string', id=None)}}\n",
      "\n",
      "Dataset Description:\n",
      "\n",
      "\n",
      "Dataset Citation:\n",
      "\n",
      "\n",
      "Dataset Homepage:\n",
      "\n",
      "\n",
      "Dataset License:\n",
      "\n",
      "\n",
      "Dataset Size in Bytes:\n",
      "9735651\n",
      "================================================================================\n"
     ]
    }
   ],
   "source": [
    "db.get_dataset_info(component=\"qubit\", component_name=\"TransmonCross\", data_type=\"cap_matrix\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "936b95da2f154f539ba27e1b41979b2f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading data files:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6fca24edf8654142a5811e6696144bf6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting data files:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "72ebf6f8e89445d4acd33b1d59605257",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating train split: 0 examples [00:00, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================================================================\n",
      "Dataset Features:\n",
      "{'contributor': {'PI': Value(dtype='string', id=None),\n",
      "                 'date_created': Value(dtype='string', id=None),\n",
      "                 'group': Value(dtype='string', id=None),\n",
      "                 'institution': Value(dtype='string', id=None),\n",
      "                 'misc': Value(dtype='string', id=None),\n",
      "                 'uploader': Value(dtype='string', id=None)},\n",
      " 'design': {'coupler_type': Value(dtype='string', id=None),\n",
      "            'design_options': {...},\n",
      "            'design_tool': Value(dtype='string', id=None),\n",
      "            'resonator_type': Value(dtype='string', id=None)},\n",
      " 'notes': {},\n",
      " 'sim_options': {'renderer_options': {...},\n",
      "                 'setup': {...},\n",
      "                 'simulator': Value(dtype='string', id=None)},\n",
      " 'sim_results': {'cavity_frequency': Value(dtype='float64', id=None),\n",
      "                 'kappa': Value(dtype='float64', id=None),\n",
      "                 'units': Value(dtype='string', id=None)}}\n",
      "\n",
      "Dataset Description:\n",
      "\n",
      "\n",
      "Dataset Citation:\n",
      "\n",
      "\n",
      "Dataset Homepage:\n",
      "\n",
      "\n",
      "Dataset License:\n",
      "\n",
      "\n",
      "Dataset Size in Bytes:\n",
      "4241721\n",
      "================================================================================\n"
     ]
    }
   ],
   "source": [
    "db.get_dataset_info(component=\"cavity_claw\", component_name=\"RouteMeander\", data_type=\"eigenmode\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can get the entire dataset as a Pandas DataFrame by using the `get_dataset` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PI</th>\n",
       "      <th>date_created</th>\n",
       "      <th>group</th>\n",
       "      <th>institution</th>\n",
       "      <th>uploader</th>\n",
       "      <th>design_options</th>\n",
       "      <th>design_tool</th>\n",
       "      <th>claw_to_claw</th>\n",
       "      <th>claw_to_ground</th>\n",
       "      <th>cross_to_claw</th>\n",
       "      <th>cross_to_cross</th>\n",
       "      <th>cross_to_ground</th>\n",
       "      <th>ground_to_ground</th>\n",
       "      <th>units</th>\n",
       "      <th>renderer_options</th>\n",
       "      <th>setup</th>\n",
       "      <th>simulator</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>94.97421</td>\n",
       "      <td>90.86585</td>\n",
       "      <td>3.73363</td>\n",
       "      <td>158.40783</td>\n",
       "      <td>158.40783</td>\n",
       "      <td>311.25590</td>\n",
       "      <td>fF</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'auto_increase_solution_order': True, 'enable...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-10-25-153123</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>82.44280</td>\n",
       "      <td>79.19378</td>\n",
       "      <td>2.93820</td>\n",
       "      <td>188.15089</td>\n",
       "      <td>188.15089</td>\n",
       "      <td>333.52997</td>\n",
       "      <td>fF</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'auto_increase_solution_order': True, 'enable...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>83.76412</td>\n",
       "      <td>80.18130</td>\n",
       "      <td>3.16131</td>\n",
       "      <td>104.35340</td>\n",
       "      <td>104.35340</td>\n",
       "      <td>237.02548</td>\n",
       "      <td>fF</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'auto_increase_solution_order': True, 'enable...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-10-25-153126</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>103.37057</td>\n",
       "      <td>97.22405</td>\n",
       "      <td>5.77590</td>\n",
       "      <td>174.13928</td>\n",
       "      <td>174.13928</td>\n",
       "      <td>335.31609</td>\n",
       "      <td>fF</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'auto_increase_solution_order': True, 'enable...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>68.92854</td>\n",
       "      <td>65.68607</td>\n",
       "      <td>2.87375</td>\n",
       "      <td>120.03923</td>\n",
       "      <td>120.03923</td>\n",
       "      <td>240.34085</td>\n",
       "      <td>fF</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'auto_increase_solution_order': True, 'enable...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1929</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>106.43025</td>\n",
       "      <td>101.53197</td>\n",
       "      <td>4.45645</td>\n",
       "      <td>174.46380</td>\n",
       "      <td>174.46380</td>\n",
       "      <td>340.62919</td>\n",
       "      <td>fF</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'auto_increase_solution_order': True, 'enable...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1930</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142549</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>121.10943</td>\n",
       "      <td>112.62570</td>\n",
       "      <td>7.95178</td>\n",
       "      <td>187.43537</td>\n",
       "      <td>187.43537</td>\n",
       "      <td>367.34003</td>\n",
       "      <td>fF</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'auto_increase_solution_order': True, 'enable...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1931</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-10-25-153123</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>144.56289</td>\n",
       "      <td>136.36810</td>\n",
       "      <td>7.65968</td>\n",
       "      <td>172.14561</td>\n",
       "      <td>172.14561</td>\n",
       "      <td>372.39970</td>\n",
       "      <td>fF</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'auto_increase_solution_order': True, 'enable...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1932</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>68.76413</td>\n",
       "      <td>65.78116</td>\n",
       "      <td>2.48795</td>\n",
       "      <td>56.75230</td>\n",
       "      <td>56.75230</td>\n",
       "      <td>166.57383</td>\n",
       "      <td>fF</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'auto_increase_solution_order': True, 'enable...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1933</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142549</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>58.45749</td>\n",
       "      <td>55.50796</td>\n",
       "      <td>2.54396</td>\n",
       "      <td>62.01000</td>\n",
       "      <td>62.01000</td>\n",
       "      <td>162.42140</td>\n",
       "      <td>fF</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'auto_increase_solution_order': True, 'enable...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1934 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          PI       date_created group institution   uploader  \\\n",
       "0     Eli Levenson-Falk, PhD  2023-09-20-142547   LFL         USC  Andre Kuo   \n",
       "1     Eli Levenson-Falk, PhD  2023-10-25-153123   LFL         USC  Andre Kuo   \n",
       "2     Eli Levenson-Falk, PhD  2023-09-20-142547   LFL         USC  Andre Kuo   \n",
       "3     Eli Levenson-Falk, PhD  2023-10-25-153126   LFL         USC  Andre Kuo   \n",
       "4     Eli Levenson-Falk, PhD  2023-09-20-142547   LFL         USC  Andre Kuo   \n",
       "...                      ...                ...   ...         ...        ...   \n",
       "1929  Eli Levenson-Falk, PhD  2023-09-20-142547   LFL         USC  Andre Kuo   \n",
       "1930  Eli Levenson-Falk, PhD  2023-09-20-142549   LFL         USC  Andre Kuo   \n",
       "1931  Eli Levenson-Falk, PhD  2023-10-25-153123   LFL         USC  Andre Kuo   \n",
       "1932  Eli Levenson-Falk, PhD  2023-09-20-142547   LFL         USC  Andre Kuo   \n",
       "1933  Eli Levenson-Falk, PhD  2023-09-20-142549   LFL         USC  Andre Kuo   \n",
       "\n",
       "                                         design_options   design_tool  \\\n",
       "0     {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...  qiskit-metal   \n",
       "1     {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...  qiskit-metal   \n",
       "2     {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...  qiskit-metal   \n",
       "3     {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...  qiskit-metal   \n",
       "4     {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...  qiskit-metal   \n",
       "...                                                 ...           ...   \n",
       "1929  {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...  qiskit-metal   \n",
       "1930  {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...  qiskit-metal   \n",
       "1931  {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...  qiskit-metal   \n",
       "1932  {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...  qiskit-metal   \n",
       "1933  {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...  qiskit-metal   \n",
       "\n",
       "      claw_to_claw  claw_to_ground  cross_to_claw  cross_to_cross  \\\n",
       "0         94.97421        90.86585        3.73363       158.40783   \n",
       "1         82.44280        79.19378        2.93820       188.15089   \n",
       "2         83.76412        80.18130        3.16131       104.35340   \n",
       "3        103.37057        97.22405        5.77590       174.13928   \n",
       "4         68.92854        65.68607        2.87375       120.03923   \n",
       "...            ...             ...            ...             ...   \n",
       "1929     106.43025       101.53197        4.45645       174.46380   \n",
       "1930     121.10943       112.62570        7.95178       187.43537   \n",
       "1931     144.56289       136.36810        7.65968       172.14561   \n",
       "1932      68.76413        65.78116        2.48795        56.75230   \n",
       "1933      58.45749        55.50796        2.54396        62.01000   \n",
       "\n",
       "      cross_to_ground  ground_to_ground units  \\\n",
       "0           158.40783         311.25590    fF   \n",
       "1           188.15089         333.52997    fF   \n",
       "2           104.35340         237.02548    fF   \n",
       "3           174.13928         335.31609    fF   \n",
       "4           120.03923         240.34085    fF   \n",
       "...               ...               ...   ...   \n",
       "1929        174.46380         340.62919    fF   \n",
       "1930        187.43537         367.34003    fF   \n",
       "1931        172.14561         372.39970    fF   \n",
       "1932         56.75230         166.57383    fF   \n",
       "1933         62.01000         162.42140    fF   \n",
       "\n",
       "                                       renderer_options  \\\n",
       "0     {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "1     {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "2     {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "3     {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "4     {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "...                                                 ...   \n",
       "1929  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "1930  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "1931  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "1932  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "1933  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "\n",
       "                                                  setup   simulator  \n",
       "0     {'auto_increase_solution_order': True, 'enable...  Ansys HFSS  \n",
       "1     {'auto_increase_solution_order': True, 'enable...  Ansys HFSS  \n",
       "2     {'auto_increase_solution_order': True, 'enable...  Ansys HFSS  \n",
       "3     {'auto_increase_solution_order': True, 'enable...  Ansys HFSS  \n",
       "4     {'auto_increase_solution_order': True, 'enable...  Ansys HFSS  \n",
       "...                                                 ...         ...  \n",
       "1929  {'auto_increase_solution_order': True, 'enable...  Ansys HFSS  \n",
       "1930  {'auto_increase_solution_order': True, 'enable...  Ansys HFSS  \n",
       "1931  {'auto_increase_solution_order': True, 'enable...  Ansys HFSS  \n",
       "1932  {'auto_increase_solution_order': True, 'enable...  Ansys HFSS  \n",
       "1933  {'auto_increase_solution_order': True, 'enable...  Ansys HFSS  \n",
       "\n",
       "[1934 rows x 17 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db.see_dataset(component=\"qubit\", component_name=\"TransmonCross\", data_type=\"cap_matrix\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to learn about the who contributed the data, you can use the following methods:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╒════════════╤════════════════════════╤═════════╤═══════════════╕\n",
      "│ uploader   │ PI                     │ group   │ institution   │\n",
      "╞════════════╪════════════════════════╪═════════╪═══════════════╡\n",
      "│ Andre Kuo  │ Eli Levenson-Falk, PhD │ LFL     │ USC           │\n",
      "╘════════════╧════════════════════════╧═════════╧═══════════════╛\n"
     ]
    }
   ],
   "source": [
    "db.view_contributors_of(\"qubit\", \"TransmonCross\", \"cap_matrix\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fbb11f1d22ad45f3915483512c890082",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading data files:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "683e32867e3c41179e915f1fea22826c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Extracting data files:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ef905b874f1d4966a175d58757835e80",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating train split: 0 examples [00:00, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╒════════════╤════════════════════════╤═════════╤═══════════════╤════════════════════════════════════╕\n",
      "│ uploader   │ PI                     │ group   │ institution   │ config                             │\n",
      "╞════════════╪════════════════════════╪═════════╪═══════════════╪════════════════════════════════════╡\n",
      "│ Andre Kuo  │ Eli Levenson-Falk, PhD │ LFL     │ USC           │ qubit-TransmonCross-cap_matrix     │\n",
      "├────────────┼────────────────────────┼─────────┼───────────────┼────────────────────────────────────┤\n",
      "│ Andre Kuo  │ Eli Levenson-Falk, PhD │ LFL     │ USC           │ cavity_claw-RouteMeander-eigenmode │\n",
      "├────────────┼────────────────────────┼─────────┼───────────────┼────────────────────────────────────┤\n",
      "│ Andre Kuo  │ Eli Levenson-Falk      │ LFL     │ USC           │ cavity_claw-RouteMeander-eigenmode │\n",
      "├────────────┼────────────────────────┼─────────┼───────────────┼────────────────────────────────────┤\n",
      "│ Andre Kuo  │ Eli Levenson-Falk, PhD │ LFL     │ USC           │ coupler-NCap-cap_matrix            │\n",
      "╘════════════╧════════════════════════╧═════════╧═══════════════╧════════════════════════════════════╛\n"
     ]
    }
   ],
   "source": [
    "db.view_all_contributors()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As the SQuADDS_DB dataset updates, so will all the information we have queried automatically. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Making Systems out of Circuit QED Elements\n",
    "\n",
    "One of the main use cases of the SQuADDS project is to get the design space parameters for systems of our interest using our desired Hamiltonian parameters."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the SQuADDS API, we can \"build\" a system by choosing the circuit QED components we want to use.\n",
    "\n",
    "The following subsections walks you through some examples."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Querying for the a target qubit design\n",
    "\n",
    "Let's say you know the Hamiltonian parameters of a qubit you want to use. You can use the SQuADDS API to query for the closest design to your target qubit.\n",
    "\n",
    "We first need to select our sytem of interest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "db.select_system(\"qubit\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we need to specify to SQuADDS what type of `qubit` our system is. We can do this by using the `select_qubit` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "db.select_qubit(\"TransmonCross\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now create the system dataframe so that we can query for the design parameters we are interested in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = db.create_system_df()\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have created our system dataframe, we can query for the closest design to our target qubit parameters. To do this we need to call the `Analyzer` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "from squadds import Analyzer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We instatantaite the `Analyzer` object by passing in the `SQuADDS_DB` instance we created earlier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "analyzer = Analyzer(db)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now check for what type of Hamiltonian parameters are available for our chosen system"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "analyzer.target_param_keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, Let's select a geometry which results in the closest qubit characteristics\n",
    "\n",
    "Call `Analyzer.find_closest`\n",
    "\n",
    "**Documentation:**\n",
    "\n",
    "```\n",
    "Finds the rows in the DataFrame with the closest matching characteristics\n",
    "to the given target parameters using a specified metric.\n",
    "\n",
    "Args:\n",
    "    target_params (dict): A dictionary containing the target values for columns in `self.df`.\n",
    "                          Keys are column names and values are the target values.\n",
    "    num_top (int): The number of closest matching rows to return.\n",
    "    metric (str, optional): The distance metric to use for finding the closest matches.\n",
    "                            Available options are specified in `self.__supported_metrics__`.\n",
    "                            Defaults to 'Euclidean'.\n",
    "    display (bool, optional): Whether to display warnings and logs. Defaults to True.\n",
    "\n",
    "Returns:\n",
    "    pd.DataFrame: A DataFrame containing the rows with the closest matching characteristics,\n",
    "                  sorted by the distance metric.\n",
    "\n",
    "Raises:\n",
    "    ValueError: If the specified metric is not supported or `num_top` exceeds the DataFrame size.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You are given the choice of the following metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "analyzer.__supported_metrics__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define your Hamiltonian parameters that you want to use for your qubit "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_params={\"qubit_frequency_GHz\": 4, \"anharmonicity_MHz\": -200}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = analyzer.find_closest(target_params=target_params,\n",
    "                                       num_top=3,\n",
    "                                       metric=\"Euclidean\",\n",
    "                                       display=True)\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thats it! You have now found some designs for your qubit that are closest to your target Hamiltonian parameters."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using Custom Metrics\n",
    "\n",
    "To use a custom metric first define the function. For example, lets say we want the manhattan metric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def manhattan_distance(target, simulated):\n",
    "    return sum(abs(target[key] - simulated.get(key, 0)) for key in target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "analyzer.custom_metric_func = manhattan_distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "analyzer.find_closest(target_params=target_params,\n",
    "                                            num_top=1,\n",
    "                                            metric=\"Custom\",\n",
    "                                            display=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_options = results.iloc[0][\"design_options\"]\n",
    "best_options"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can pass in the `design_options` from the closest design to the `options` argument of your selected qubit and render it in qiskit metal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Qiskit Metal imports\n",
    "import qiskit_metal as metal\n",
    "from qiskit_metal import designs, draw\n",
    "from qiskit_metal import MetalGUI, Dict\n",
    "from qiskit_metal.designs.design_multiplanar import MultiPlanar\n",
    "\n",
    "from qiskit_metal.qlibrary.qubits.transmon_cross import TransmonCross\n",
    "from qiskit_metal.qlibrary.couplers.coupled_line_tee import CoupledLineTee\n",
    "from qiskit_metal.qlibrary.tlines.meandered import RouteMeander\n",
    "from qiskit_metal.qlibrary.core import QRoute, QRoutePoint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "design = MultiPlanar(metadata={},\n",
    "                     overwrite_enabled=True)\n",
    "gui = MetalGUI(design)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit_metal.qlibrary.qubits.transmon_cross import TransmonCross\n",
    "\n",
    "TransmonCross(design, \"transmon\", options=best_options)\n",
    "\n",
    "gui.rebuild()\n",
    "gui.zoom_on_components(['transmon'])\n",
    "gui.screenshot(\"qubit_only.png\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Querying for a target cavity design\n",
    "\n",
    "The same workflow can be used to query for a target cavity design."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While it is not necessary, it may be a good idea to `unselect_all()` before creating a new system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "db.unselect_all()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Proceed with selecting the system of interest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "db.select_system(\"cavity_claw\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "db.select_cavity_claw(\"RouteMeander\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets see what our options are for the `coupler` from the cavity to the feedline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['NCap', 'CLT']"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db.get_component_names(\"coupler\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "db.select_coupler(\"NCap\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's always a good idea to check that the system you have selected is correct."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected component:  cavity_claw\n",
      "Selected component name:  RouteMeander\n",
      "Selected data type:  eigenmode\n",
      "Selected system:  cavity_claw\n",
      "Selected coupler:  NCap\n"
     ]
    }
   ],
   "source": [
    "db.show_selections()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great! lets create the system dataframe and analyze it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = db.create_system_df()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PI</th>\n",
       "      <th>date_created</th>\n",
       "      <th>group</th>\n",
       "      <th>institution</th>\n",
       "      <th>misc</th>\n",
       "      <th>uploader</th>\n",
       "      <th>coupler_type</th>\n",
       "      <th>design_options</th>\n",
       "      <th>design_tool</th>\n",
       "      <th>resonator_type</th>\n",
       "      <th>cavity_frequency</th>\n",
       "      <th>kappa</th>\n",
       "      <th>units</th>\n",
       "      <th>renderer_options</th>\n",
       "      <th>setup</th>\n",
       "      <th>simulator</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>504</th>\n",
       "      <td>Eli Levenson-Falk</td>\n",
       "      <td>2024-02-26 230413</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td></td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>NCap</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>2.426647e+10</td>\n",
       "      <td>2230.218726</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>505</th>\n",
       "      <td>Eli Levenson-Falk</td>\n",
       "      <td>2024-02-26 230413</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td></td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>NCap</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>2.031855e+10</td>\n",
       "      <td>1867.346982</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>506</th>\n",
       "      <td>Eli Levenson-Falk</td>\n",
       "      <td>2024-02-26 230413</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td></td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>NCap</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>1.739228e+10</td>\n",
       "      <td>1598.353495</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>507</th>\n",
       "      <td>Eli Levenson-Falk</td>\n",
       "      <td>2024-02-26 230413</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td></td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>NCap</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>1.520495e+10</td>\n",
       "      <td>1397.273822</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>508</th>\n",
       "      <td>Eli Levenson-Falk</td>\n",
       "      <td>2024-02-26 230413</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td></td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>NCap</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>1.351018e+10</td>\n",
       "      <td>1241.576912</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>905</th>\n",
       "      <td>Eli Levenson-Falk</td>\n",
       "      <td>2024-02-26 230413</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td></td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>NCap</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>1.859429e+10</td>\n",
       "      <td>1708.750004</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>906</th>\n",
       "      <td>Eli Levenson-Falk</td>\n",
       "      <td>2024-02-26 230413</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td></td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>NCap</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>1.609044e+10</td>\n",
       "      <td>1478.741367</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>907</th>\n",
       "      <td>Eli Levenson-Falk</td>\n",
       "      <td>2024-02-26 230413</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td></td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>NCap</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>7.502149e+09</td>\n",
       "      <td>689.346880</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>908</th>\n",
       "      <td>Eli Levenson-Falk</td>\n",
       "      <td>2024-02-26 230413</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td></td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>NCap</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>7.064153e+09</td>\n",
       "      <td>649.104744</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>909</th>\n",
       "      <td>Eli Levenson-Falk</td>\n",
       "      <td>2024-02-26 230413</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td></td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>NCap</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>7.951532e+09</td>\n",
       "      <td>730.579357</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>406 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    PI       date_created group institution misc   uploader  \\\n",
       "504  Eli Levenson-Falk  2024-02-26 230413   LFL         USC       Andre Kuo   \n",
       "505  Eli Levenson-Falk  2024-02-26 230413   LFL         USC       Andre Kuo   \n",
       "506  Eli Levenson-Falk  2024-02-26 230413   LFL         USC       Andre Kuo   \n",
       "507  Eli Levenson-Falk  2024-02-26 230413   LFL         USC       Andre Kuo   \n",
       "508  Eli Levenson-Falk  2024-02-26 230413   LFL         USC       Andre Kuo   \n",
       "..                 ...                ...   ...         ...  ...        ...   \n",
       "905  Eli Levenson-Falk  2024-02-26 230413   LFL         USC       Andre Kuo   \n",
       "906  Eli Levenson-Falk  2024-02-26 230413   LFL         USC       Andre Kuo   \n",
       "907  Eli Levenson-Falk  2024-02-26 230413   LFL         USC       Andre Kuo   \n",
       "908  Eli Levenson-Falk  2024-02-26 230413   LFL         USC       Andre Kuo   \n",
       "909  Eli Levenson-Falk  2024-02-26 230413   LFL         USC       Andre Kuo   \n",
       "\n",
       "    coupler_type                                     design_options  \\\n",
       "504         NCap  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "505         NCap  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "506         NCap  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "507         NCap  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "508         NCap  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "..           ...                                                ...   \n",
       "905         NCap  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "906         NCap  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "907         NCap  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "908         NCap  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "909         NCap  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "\n",
       "      design_tool resonator_type  cavity_frequency        kappa units  \\\n",
       "504  Qiskit Metal           half      2.426647e+10  2230.218726    Hz   \n",
       "505  Qiskit Metal           half      2.031855e+10  1867.346982    Hz   \n",
       "506  Qiskit Metal           half      1.739228e+10  1598.353495    Hz   \n",
       "507  Qiskit Metal           half      1.520495e+10  1397.273822    Hz   \n",
       "508  Qiskit Metal           half      1.351018e+10  1241.576912    Hz   \n",
       "..            ...            ...               ...          ...   ...   \n",
       "905  Qiskit Metal           half      1.859429e+10  1708.750004    Hz   \n",
       "906  Qiskit Metal           half      1.609044e+10  1478.741367    Hz   \n",
       "907  Qiskit Metal           half      7.502149e+09   689.346880    Hz   \n",
       "908  Qiskit Metal           half      7.064153e+09   649.104744    Hz   \n",
       "909  Qiskit Metal           half      7.951532e+09   730.579357    Hz   \n",
       "\n",
       "                                      renderer_options  \\\n",
       "504  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "505  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "506  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "507  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "508  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "..                                                 ...   \n",
       "905  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "906  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "907  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "908  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "909  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "\n",
       "                                                 setup   simulator  \n",
       "504  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...  Ansys HFSS  \n",
       "505  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...  Ansys HFSS  \n",
       "506  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...  Ansys HFSS  \n",
       "507  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...  Ansys HFSS  \n",
       "508  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...  Ansys HFSS  \n",
       "..                                                 ...         ...  \n",
       "905  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...  Ansys HFSS  \n",
       "906  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...  Ansys HFSS  \n",
       "907  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...  Ansys HFSS  \n",
       "908  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...  Ansys HFSS  \n",
       "909  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...  Ansys HFSS  \n",
       "\n",
       "[406 rows x 16 columns]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "analyzer = Analyzer(db)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "analyzer.target_param_keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Select the Hamiltonian parameters you want to use for your cavity and search for the closest designs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_params = {\"cavity_frequency_GHz\": 6.9,\n",
    "                \"kappa_kHz\": 120,\n",
    "                \"resonator_type\":\"quarter\"}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = analyzer.find_closest(target_params=target_params,\n",
    "                                       num_top=5,\n",
    "                                       metric=\"Euclidean\",\n",
    "                                       display=True)\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets say we want to use the \"Weighted Euclidean\" metric to find the closest design to our target cavity parameters.\n",
    "\n",
    "#### Weighted Euclidean Metric\n",
    "\n",
    "You can do a weighted Euclidean metric instead.\n",
    "\n",
    "$$\n",
    "F(\\{P_i\\},\\{p_i\\}) = \\sum_i w_i\\frac{(P_i - p_i)^2}{P_i^2}\n",
    "$$\n",
    "\n",
    "Here \\( w_i \\) are weights which default to 1 if not user-defined.\n",
    "\n",
    "Note: The default metric for `find_closest` is `Euclidean` when not user-defined.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up the weights\n",
    "analyzer.metric_weights = {\"cavity_frequency_GHz\": 2, \"kappa_kHz\": 1}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = analyzer.find_closest(target_params=target_params,\n",
    "                                       num_top=3,\n",
    "                                       metric=\"Weighted Euclidean\",\n",
    "                                       display=True)\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Querying for a target qubit-cavity design\n",
    "\n",
    "Again, we follow the same procedure as before."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "db.select_system([\"qubit\",\"cavity_claw\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "db.select_qubit(\"TransmonCross\")\n",
    "db.select_cavity_claw(\"RouteMeander\")\n",
    "db.select_coupler(\"NCap\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected qubit:  TransmonCross\n",
      "Selected cavity:  RouteMeander\n",
      "Selected coupler:  NCap\n",
      "Selected system:  ['qubit', 'cavity_claw']\n"
     ]
    }
   ],
   "source": [
    "db.show_selections()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_df = db.create_system_df()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PI_qubit</th>\n",
       "      <th>date_created_qubit</th>\n",
       "      <th>group_qubit</th>\n",
       "      <th>institution_qubit</th>\n",
       "      <th>uploader_qubit</th>\n",
       "      <th>design_options_qubit</th>\n",
       "      <th>design_tool_qubit</th>\n",
       "      <th>claw_to_claw</th>\n",
       "      <th>claw_to_ground</th>\n",
       "      <th>cross_to_claw</th>\n",
       "      <th>...</th>\n",
       "      <th>design_options_cavity_claw</th>\n",
       "      <th>design_tool_cavity_claw</th>\n",
       "      <th>resonator_type</th>\n",
       "      <th>cavity_frequency</th>\n",
       "      <th>kappa</th>\n",
       "      <th>units_cavity_claw</th>\n",
       "      <th>renderer_options_cavity_claw</th>\n",
       "      <th>setup_cavity_claw</th>\n",
       "      <th>simulator_cavity_claw</th>\n",
       "      <th>design_options</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>94.97421</td>\n",
       "      <td>90.86585</td>\n",
       "      <td>3.73363</td>\n",
       "      <td>...</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>2.804481e+10</td>\n",
       "      <td>2577.546453</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "      <td>{'cavity_claw_options': {'coupler_type': 'NCap...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>94.97421</td>\n",
       "      <td>90.86585</td>\n",
       "      <td>3.73363</td>\n",
       "      <td>...</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>2.266918e+10</td>\n",
       "      <td>2083.279745</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "      <td>{'cavity_claw_options': {'coupler_type': 'NCap...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>94.97421</td>\n",
       "      <td>90.86585</td>\n",
       "      <td>3.73363</td>\n",
       "      <td>...</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>1.915862e+10</td>\n",
       "      <td>1760.685136</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "      <td>{'cavity_claw_options': {'coupler_type': 'NCap...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>94.97421</td>\n",
       "      <td>90.86585</td>\n",
       "      <td>3.73363</td>\n",
       "      <td>...</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>1.652298e+10</td>\n",
       "      <td>1518.509245</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "      <td>{'cavity_claw_options': {'coupler_type': 'NCap...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>94.97421</td>\n",
       "      <td>90.86585</td>\n",
       "      <td>3.73363</td>\n",
       "      <td>...</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>1.452997e+10</td>\n",
       "      <td>1335.178256</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "      <td>{'cavity_claw_options': {'coupler_type': 'NCap...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38363</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>72.53188</td>\n",
       "      <td>68.84196</td>\n",
       "      <td>3.26083</td>\n",
       "      <td>...</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>8.590180e+09</td>\n",
       "      <td>789.338005</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "      <td>{'cavity_claw_options': {'coupler_type': 'NCap...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38364</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>72.53188</td>\n",
       "      <td>68.84196</td>\n",
       "      <td>3.26083</td>\n",
       "      <td>...</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>8.020724e+09</td>\n",
       "      <td>736.999681</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "      <td>{'cavity_claw_options': {'coupler_type': 'NCap...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38365</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>72.53188</td>\n",
       "      <td>68.84196</td>\n",
       "      <td>3.26083</td>\n",
       "      <td>...</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>7.522096e+09</td>\n",
       "      <td>691.165771</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "      <td>{'cavity_claw_options': {'coupler_type': 'NCap...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38366</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>72.53188</td>\n",
       "      <td>68.84196</td>\n",
       "      <td>3.26083</td>\n",
       "      <td>...</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>7.081743e+09</td>\n",
       "      <td>650.709095</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "      <td>{'cavity_claw_options': {'coupler_type': 'NCap...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38367</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142547</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>72.53188</td>\n",
       "      <td>68.84196</td>\n",
       "      <td>3.26083</td>\n",
       "      <td>...</td>\n",
       "      <td>{'claw_opts': {'connection_pads': {'readout': ...</td>\n",
       "      <td>Qiskit Metal</td>\n",
       "      <td>half</td>\n",
       "      <td>6.690055e+09</td>\n",
       "      <td>614.709406</td>\n",
       "      <td>Hz</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "      <td>{'cavity_claw_options': {'coupler_type': 'NCap...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>38368 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     PI_qubit date_created_qubit group_qubit  \\\n",
       "0      Eli Levenson-Falk, PhD  2023-09-20-142547         LFL   \n",
       "1      Eli Levenson-Falk, PhD  2023-09-20-142547         LFL   \n",
       "2      Eli Levenson-Falk, PhD  2023-09-20-142547         LFL   \n",
       "3      Eli Levenson-Falk, PhD  2023-09-20-142547         LFL   \n",
       "4      Eli Levenson-Falk, PhD  2023-09-20-142547         LFL   \n",
       "...                       ...                ...         ...   \n",
       "38363  Eli Levenson-Falk, PhD  2023-09-20-142547         LFL   \n",
       "38364  Eli Levenson-Falk, PhD  2023-09-20-142547         LFL   \n",
       "38365  Eli Levenson-Falk, PhD  2023-09-20-142547         LFL   \n",
       "38366  Eli Levenson-Falk, PhD  2023-09-20-142547         LFL   \n",
       "38367  Eli Levenson-Falk, PhD  2023-09-20-142547         LFL   \n",
       "\n",
       "      institution_qubit uploader_qubit  \\\n",
       "0                   USC      Andre Kuo   \n",
       "1                   USC      Andre Kuo   \n",
       "2                   USC      Andre Kuo   \n",
       "3                   USC      Andre Kuo   \n",
       "4                   USC      Andre Kuo   \n",
       "...                 ...            ...   \n",
       "38363               USC      Andre Kuo   \n",
       "38364               USC      Andre Kuo   \n",
       "38365               USC      Andre Kuo   \n",
       "38366               USC      Andre Kuo   \n",
       "38367               USC      Andre Kuo   \n",
       "\n",
       "                                    design_options_qubit design_tool_qubit  \\\n",
       "0      {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...      qiskit-metal   \n",
       "1      {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...      qiskit-metal   \n",
       "2      {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...      qiskit-metal   \n",
       "3      {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...      qiskit-metal   \n",
       "4      {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...      qiskit-metal   \n",
       "...                                                  ...               ...   \n",
       "38363  {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...      qiskit-metal   \n",
       "38364  {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...      qiskit-metal   \n",
       "38365  {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...      qiskit-metal   \n",
       "38366  {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...      qiskit-metal   \n",
       "38367  {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...      qiskit-metal   \n",
       "\n",
       "       claw_to_claw  claw_to_ground  cross_to_claw  ...  \\\n",
       "0          94.97421        90.86585        3.73363  ...   \n",
       "1          94.97421        90.86585        3.73363  ...   \n",
       "2          94.97421        90.86585        3.73363  ...   \n",
       "3          94.97421        90.86585        3.73363  ...   \n",
       "4          94.97421        90.86585        3.73363  ...   \n",
       "...             ...             ...            ...  ...   \n",
       "38363      72.53188        68.84196        3.26083  ...   \n",
       "38364      72.53188        68.84196        3.26083  ...   \n",
       "38365      72.53188        68.84196        3.26083  ...   \n",
       "38366      72.53188        68.84196        3.26083  ...   \n",
       "38367      72.53188        68.84196        3.26083  ...   \n",
       "\n",
       "                              design_options_cavity_claw  \\\n",
       "0      {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "1      {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "2      {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "3      {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "4      {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "...                                                  ...   \n",
       "38363  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "38364  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "38365  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "38366  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "38367  {'claw_opts': {'connection_pads': {'readout': ...   \n",
       "\n",
       "       design_tool_cavity_claw  resonator_type cavity_frequency        kappa  \\\n",
       "0                 Qiskit Metal            half     2.804481e+10  2577.546453   \n",
       "1                 Qiskit Metal            half     2.266918e+10  2083.279745   \n",
       "2                 Qiskit Metal            half     1.915862e+10  1760.685136   \n",
       "3                 Qiskit Metal            half     1.652298e+10  1518.509245   \n",
       "4                 Qiskit Metal            half     1.452997e+10  1335.178256   \n",
       "...                        ...             ...              ...          ...   \n",
       "38363             Qiskit Metal            half     8.590180e+09   789.338005   \n",
       "38364             Qiskit Metal            half     8.020724e+09   736.999681   \n",
       "38365             Qiskit Metal            half     7.522096e+09   691.165771   \n",
       "38366             Qiskit Metal            half     7.081743e+09   650.709095   \n",
       "38367             Qiskit Metal            half     6.690055e+09   614.709406   \n",
       "\n",
       "      units_cavity_claw                       renderer_options_cavity_claw  \\\n",
       "0                    Hz  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "1                    Hz  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "2                    Hz  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "3                    Hz  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "4                    Hz  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "...                 ...                                                ...   \n",
       "38363                Hz  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "38364                Hz  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "38365                Hz  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "38366                Hz  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "38367                Hz  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "\n",
       "                                       setup_cavity_claw  \\\n",
       "0      {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...   \n",
       "1      {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...   \n",
       "2      {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...   \n",
       "3      {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...   \n",
       "4      {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...   \n",
       "...                                                  ...   \n",
       "38363  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...   \n",
       "38364  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...   \n",
       "38365  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...   \n",
       "38366  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...   \n",
       "38367  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...   \n",
       "\n",
       "      simulator_cavity_claw                                     design_options  \n",
       "0                Ansys HFSS  {'cavity_claw_options': {'coupler_type': 'NCap...  \n",
       "1                Ansys HFSS  {'cavity_claw_options': {'coupler_type': 'NCap...  \n",
       "2                Ansys HFSS  {'cavity_claw_options': {'coupler_type': 'NCap...  \n",
       "3                Ansys HFSS  {'cavity_claw_options': {'coupler_type': 'NCap...  \n",
       "4                Ansys HFSS  {'cavity_claw_options': {'coupler_type': 'NCap...  \n",
       "...                     ...                                                ...  \n",
       "38363            Ansys HFSS  {'cavity_claw_options': {'coupler_type': 'NCap...  \n",
       "38364            Ansys HFSS  {'cavity_claw_options': {'coupler_type': 'NCap...  \n",
       "38365            Ansys HFSS  {'cavity_claw_options': {'coupler_type': 'NCap...  \n",
       "38366            Ansys HFSS  {'cavity_claw_options': {'coupler_type': 'NCap...  \n",
       "38367            Ansys HFSS  {'cavity_claw_options': {'coupler_type': 'NCap...  \n",
       "\n",
       "[38368 rows x 34 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pass the `SQuADDS_DB` instance to the `Analyzer` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "analyzer = Analyzer(db)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Always good to check whether the system you have selected is correct."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['qubit', 'cavity_claw']"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db.selected_system"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['qubit', 'cavity_claw']"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "analyzer.selected_system"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define the `target_params` for your qubit-cavity system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_params = {\n",
    "                \"qubit_frequency_GHz\": 4,\n",
    "                \"cavity_frequency_GHz\": 6.2,\n",
    "                \"kappa_kHz\": 120,\n",
    "                \"resonator_type\":\"quarter\",\n",
    "                \"anharmonicity_MHz\": -200,\n",
    "                \"g_MHz\": 70}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_params = {\n",
    "                \"qubit_frequency_GHz\": 4,\n",
    "                \"cavity_frequency_GHz\": 6.2,\n",
    "                \"kappa_kHz\": 120,\n",
    "                \"resonator_type\":\"half\",\n",
    "                \"anharmonicity_MHz\": -200,\n",
    "                \"g_MHz\": 70}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PI_qubit</th>\n",
       "      <th>date_created_qubit</th>\n",
       "      <th>group_qubit</th>\n",
       "      <th>institution_qubit</th>\n",
       "      <th>uploader_qubit</th>\n",
       "      <th>design_options_qubit</th>\n",
       "      <th>design_tool_qubit</th>\n",
       "      <th>claw_to_claw</th>\n",
       "      <th>claw_to_ground</th>\n",
       "      <th>cross_to_claw</th>\n",
       "      <th>...</th>\n",
       "      <th>renderer_options_cavity_claw</th>\n",
       "      <th>setup_cavity_claw</th>\n",
       "      <th>simulator_cavity_claw</th>\n",
       "      <th>design_options</th>\n",
       "      <th>EC</th>\n",
       "      <th>EJ</th>\n",
       "      <th>EJEC</th>\n",
       "      <th>qubit_frequency_GHz</th>\n",
       "      <th>anharmonicity_MHz</th>\n",
       "      <th>g_MHz</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>26349</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142549</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>102.50358</td>\n",
       "      <td>94.66779</td>\n",
       "      <td>7.24470</td>\n",
       "      <td>...</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "      <td>{'cavity_claw_options': {'coupler_type': 'NCap...</td>\n",
       "      <td>0.180488</td>\n",
       "      <td>12.278081</td>\n",
       "      <td>68.027039</td>\n",
       "      <td>4.021247</td>\n",
       "      <td>-202.397239</td>\n",
       "      <td>66.441126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26363</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142549</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>102.50358</td>\n",
       "      <td>94.66779</td>\n",
       "      <td>7.24470</td>\n",
       "      <td>...</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "      <td>{'cavity_claw_options': {'coupler_type': 'NCap...</td>\n",
       "      <td>0.180488</td>\n",
       "      <td>12.278081</td>\n",
       "      <td>68.027039</td>\n",
       "      <td>4.021247</td>\n",
       "      <td>-202.397239</td>\n",
       "      <td>66.441126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18362</th>\n",
       "      <td>Eli Levenson-Falk, PhD</td>\n",
       "      <td>2023-09-20-142549</td>\n",
       "      <td>LFL</td>\n",
       "      <td>USC</td>\n",
       "      <td>Andre Kuo</td>\n",
       "      <td>{'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...</td>\n",
       "      <td>qiskit-metal</td>\n",
       "      <td>106.21357</td>\n",
       "      <td>98.01817</td>\n",
       "      <td>7.60297</td>\n",
       "      <td>...</td>\n",
       "      <td>{'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...</td>\n",
       "      <td>{'basis_order': 1, 'max_delta_f': 0.05, 'max_p...</td>\n",
       "      <td>Ansys HFSS</td>\n",
       "      <td>{'cavity_claw_options': {'coupler_type': 'NCap...</td>\n",
       "      <td>0.171785</td>\n",
       "      <td>12.278081</td>\n",
       "      <td>71.473514</td>\n",
       "      <td>3.927835</td>\n",
       "      <td>-191.988717</td>\n",
       "      <td>67.037553</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     PI_qubit date_created_qubit group_qubit  \\\n",
       "26349  Eli Levenson-Falk, PhD  2023-09-20-142549         LFL   \n",
       "26363  Eli Levenson-Falk, PhD  2023-09-20-142549         LFL   \n",
       "18362  Eli Levenson-Falk, PhD  2023-09-20-142549         LFL   \n",
       "\n",
       "      institution_qubit uploader_qubit  \\\n",
       "26349               USC      Andre Kuo   \n",
       "26363               USC      Andre Kuo   \n",
       "18362               USC      Andre Kuo   \n",
       "\n",
       "                                    design_options_qubit design_tool_qubit  \\\n",
       "26349  {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...      qiskit-metal   \n",
       "26363  {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...      qiskit-metal   \n",
       "18362  {'aedt_hfss_capacitance': 0, 'aedt_hfss_induct...      qiskit-metal   \n",
       "\n",
       "       claw_to_claw  claw_to_ground  cross_to_claw  ...  \\\n",
       "26349     102.50358        94.66779        7.24470  ...   \n",
       "26363     102.50358        94.66779        7.24470  ...   \n",
       "18362     106.21357        98.01817        7.60297  ...   \n",
       "\n",
       "                            renderer_options_cavity_claw  \\\n",
       "26349  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "26363  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "18362  {'Cj': 0, 'Lj': '10nH', '_Rj': 0, 'design_name...   \n",
       "\n",
       "                                       setup_cavity_claw  \\\n",
       "26349  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...   \n",
       "26363  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...   \n",
       "18362  {'basis_order': 1, 'max_delta_f': 0.05, 'max_p...   \n",
       "\n",
       "       simulator_cavity_claw  \\\n",
       "26349             Ansys HFSS   \n",
       "26363             Ansys HFSS   \n",
       "18362             Ansys HFSS   \n",
       "\n",
       "                                          design_options        EC         EJ  \\\n",
       "26349  {'cavity_claw_options': {'coupler_type': 'NCap...  0.180488  12.278081   \n",
       "26363  {'cavity_claw_options': {'coupler_type': 'NCap...  0.180488  12.278081   \n",
       "18362  {'cavity_claw_options': {'coupler_type': 'NCap...  0.171785  12.278081   \n",
       "\n",
       "            EJEC qubit_frequency_GHz anharmonicity_MHz      g_MHz  \n",
       "26349  68.027039            4.021247       -202.397239  66.441126  \n",
       "26363  68.027039            4.021247       -202.397239  66.441126  \n",
       "18362  71.473514            3.927835       -191.988717  67.037553  \n",
       "\n",
       "[3 rows x 40 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = analyzer.find_closest(target_params=target_params,\n",
    "                                       num_top=3,\n",
    "                                       metric=\"Euclidean\",\n",
    "                                       display=True)\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Awesome! we have some designs for our qubit-cavity system. To see where the closest design lies in the Hamiltonian parameter space, we can use the `closest_design_in_H_space` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "analyzer.closest_design_in_H_space()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Interpolation of Best Designs\n",
    "\n",
    "Even though the `closest_design` will become better as more validated pre-simulated points are added to the database, it is still a good idea to interpolate to get the best designs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the physics inspired interpolation algorithm described in our [paper](https://arxiv.org/pdf/2312.13483.pdf) - `ScalingInterpolator` class to interpolate the best designs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from squadds.interpolations.physics import ScalingInterpolator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We pass the `Analzyer` object and the `target_params` dict to the `ScalingInterpolator` class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create an instance of ScalingInterpolator\n",
    "interpolator = ScalingInterpolator(analyzer, target_params)\n",
    "\n",
    "design_df = interpolator.get_design()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `design_df` contains the various `design_options` for the best designs and also the `sim_options` needed to simulate them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "design_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Congrats for making it to the end of this tutorial! 🤗🎉 You have now learned how to use the SQuADDS API to query for closest and \"best-guess\" interpolated device designs for your chosen Hamiltonian parameters.\n",
    "\n",
    "## Next Steps...\n",
    "\n",
    "In the next [tutorial](https://lfl-lab.github.io/SQuADDS/source/tutorials/Tutorial-2_Simulate_interpolated_designs.html), we will learn how to simulate the \"best-guess\" design using an EM solver tool and the `SQuADDS` API."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## License\n",
    "\n",
    "<div style='width: 100%; background-color:#3cb1c2;color:#324344;padding-left: 10px; padding-bottom: 10px; padding-right: 10px; padding-top: 5px'>\n",
    "    <h3>This code is a part of SQuADDS</h3>\n",
    "    <p>Developed by Sadman Ahmed Shanto</p>\n",
    "    <p>&copy; Copyright Sadman Ahmed Shanto & Eli Levenson-Falk 2023.</p>\n",
    "    <p>This code is licensed under the MIT License. You may<br> obtain a copy of this license in the LICENSE.txt file in the root directory<br> of this source tree.</p>\n",
    "    <p>Any modifications or derivative works of this code must retain this<br>copyright notice, and modified files need to carry a notice indicating<br>that they have been altered from the originals.</p>\n",
    "</div>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
